<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
=======
    <title><![CDATA[git常用命令及问题汇总]]></title>
    <url>%2F2019%2F07%2F09%2FTools%2Fgit%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%8A%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB%2F</url>
    <content type="text"></content>
=======
    <title><![CDATA[解决hexo无法提交备份theme主题目录]]></title>
    <url>%2F2019%2F07%2F09%2FTools%2Fhexo%E4%B8%BB%E9%A2%98theme%E6%97%A0%E6%B3%95%E6%8F%90%E4%BA%A4%2F</url>
    <content type="text"><![CDATA[问题描述：提交代码到github后，在新的电脑clone项目时发现之前配置的样式丢失，然后才发现主题文件是空的。 解决办法：1git rm --cached themes/next #next为你的主题名 然后重新提交即可（ 如果还不行，看下改目录下是否有.git 隐藏文件夹，删除后 重新执行清除缓存操作。） 问题原因：因为我的项目是clone的官方项目，相当于一个子项目，这里用到了git 的子模块（git submodule）功能，子模块只是一个 HEAD 指针，指向子模块的 commit。相当于把一个大项目分成多个小项目，尽可能减少项目之间的关联，方便调试和修改。 关于子模块的详细描述，参考文档： https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97]]></content>
>>>>>>> e197c5d8a43e7eb84fc49dd31c8606f21758b76f
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
<<<<<<< HEAD
>>>>>>> 2947c932778ea8ba876313138e47b44eeaae8392
    <title><![CDATA[解决hexo无法提交备份theme主题目录]]></title>
    <url>%2F2019%2F07%2F09%2FTools%2Fhexo%E4%B8%BB%E9%A2%98theme%E6%97%A0%E6%B3%95%E6%8F%90%E4%BA%A4%2F</url>
    <content type="text"><![CDATA[问题描述：提交代码到github后，在新的电脑clone项目时发现之前配置的样式丢失，然后才发现主题文件是空的。 解决办法：1git rm --cached themes/next #next为你的主题名 然后重新提交即可（ 如果还不行，看下改目录下是否有.git 隐藏文件夹，删除后 重新执行清除缓存操作。） 问题原因：因为我的项目是clone的官方项目，相当于一个子项目，这里用到了git 的子模块（git submodule）功能，子模块只是一个 HEAD 指针，指向子模块的 commit。相当于把一个大项目分成多个小项目，尽可能减少项目之间的关联，方便调试和修改。 关于子模块的详细描述，参考文档： https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97]]></content>
=======
    <title><![CDATA[git常用命令及问题汇总]]></title>
    <url>%2F2019%2F07%2F09%2FTools%2Fgit%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%8A%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB%2F</url>
    <content type="text"><![CDATA[Git配置ssh配置你的用户名和邮箱：12$ git config --global user.name "name"$ git config --global user.email "email@163.com" 生成ssh 1ssh-keygen -t rsa -C "your_email@youremail.com" Creates a new ssh key using the provided email # Generating public/private rsa # key pair.Enter file in which to save the key (/home/you/.ssh/id_rsa): 然后按两次Enter键 查看生成的公钥1cat ~/.ssh/id_rsa.pub 然后复制key到github或者gitlab 里 验证是否正常： 1ssh -T git@github.com]]></content>
>>>>>>> e197c5d8a43e7eb84fc49dd31c8606f21758b76f
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
>>>>>>> 7a77ce8429e2b835e4162736bfb92cc1fcbb61a6
    <title><![CDATA[JS基础（一）]]></title>
    <url>%2F2019%2F07%2F06%2FFE%20%2FJS%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
<<<<<<< HEAD
    <title><![CDATA[Promise对象]]></title>
=======
    <title><![CDATA[React-router4 分享 (一)]]></title>
>>>>>>> 7a77ce8429e2b835e4162736bfb92cc1fcbb61a6
    <url>%2F2019%2F07%2F05%2FFE%20%2FPromise%E5%AF%B9%E8%B1%A1%2F</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
<<<<<<< HEAD
=======
        <tag>react</tag>
>>>>>>> 7a77ce8429e2b835e4162736bfb92cc1fcbb61a6
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Fetch请求]]></title>
    <url>%2F2019%2F07%2F03%2FFE%20%2FFetch%E8%AF%B7%E6%B1%82%2F</url>
    <content type="text"><![CDATA[基本的fetch请求1234567891011121314151617const options = &#123; method: "POST", // 请求参数 headers: &#123; "Content-Type": "application/json"&#125;, // 设置请求头 或者通过：new Headers(&#123;'Content-Type': 'application/json' &#125;) body: JSON.stringify(&#123;name:'123'&#125;), // 请求参数 credentials: "same-origin", // cookie设置 mode: "cors", // 跨域&#125;fetch('url'，options) .then(function(response) &#123; return response.json(); &#125;) .then(function(myJson) &#123; console.log(myJson); // 响应数据 &#125;).catch(function(err)&#123; console.log(err); // 异常处理 &#125;) fetch 请求返回promise对象 默认情况下，fetch 不会从服务端发送或接收任何 cookies，如果需发送cookie，必须设置 credentials 对象（下面会详细介绍） 涉及到的对象1. Request对象123456const myRequest = new Request('http://localhost/api', &#123;method: 'POST', body: '&#123;"foo":"bar"&#125;'&#125;); const myURL = myRequest.url; // http://localhost/apiconst myMethod = myRequest.method; // POSTconst myCred = myRequest.credentials; // omitconst bodyUsed = myRequest.bodyUsed; // true credentials有三个可选值（官方文档说现在的默认值修改为：same-origin）omit: 从不发送cookies.same-origin: 只有当URL与响应脚本同源才发送 cookies、 HTTP Basic authentication 等验证信息.(浏览器默认值,在旧版本浏览器，例如safari 11依旧是omit，safari 12已更改)include: 不论是不是跨域的请求,总是发送请求资源域在本地的 cookies、 HTTP Basic authentication 等验证信息]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VS Code 插件-图片自动上传工具 picgo]]></title>
    <url>%2F2019%2F07%2F03%2FTools%2F%E5%9B%BE%E7%89%87%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0%E5%B7%A5%E5%85%B7picgo%2F</url>
    <content type="text"><![CDATA[搜索 安装 picgo后 ，点击小齿轮配置github上传如下： 也可以再settings.json中配置： 1234"picgo.picBed.github.repo": "itlilei/name", // 仓库名，格式是username/reponame"picgo.picBed.github.token":"***", "picgo.picBed.github.branch": "master",// 分支名，默认是master"picgo.picBed.current": "github" 详细参数配置介绍可参考官方文档：https://picgo.github.io/PicGo-Doc/zh/guide/config.html#github%E5%9B%BE%E5%BA%8A 快捷键参考： 配置过程中遇到一个坑，github生成的token复制到onenote中，粘贴时默认首字母转换成大写了，导致一直上传失败，怀疑人生 /(ㄒoㄒ)/~~]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>VS Code</tag>
      </tags>
  </entry>
</search>
