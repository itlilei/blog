{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/clicklove.js","path":"js/src/clicklove.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"source/pdf/react-router-1.pdf","path":"pdf/react-router-1.pdf","modified":0,"renderable":0},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1531376032015},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1531376032015},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1531376032015},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1531376032016},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1531376032017},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1531376032017},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1531376032017},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1531376032017},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1531376032017},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1531376032017},{"_id":"themes/next/README.cn.md","hash":"2c766b3369ed477bce134a5450dab45bef161504","modified":1531376032018},{"_id":"themes/next/README.md","hash":"8ce60ce578963eb4e1eb5e33e1efc2fc4779af9c","modified":1531376032018},{"_id":"themes/next/_config.yml","hash":"6b13d9a8b238a278de56c2b21f389333e4effdb8","modified":1564044615755},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1531376032018},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1531376032019},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1531376032038},{"_id":"source/about/index.md","hash":"f76185cc84241f09af5fcf41c9c0b367090f4a4f","modified":1562685017634},{"_id":"source/categories/index.md","hash":"ad5222018cb68813d37d0c26f29c474ae143d5a1","modified":1562661407134},{"_id":"source/schedule/index.md","hash":"fba092d5d4feb75668331e497129661a731eb85f","modified":1562661407137},{"_id":"source/tags/index.md","hash":"bcbfaece46b8778825c3fdf333eb452004890ac1","modified":1562661407138},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1562657657775},{"_id":"themes/next/languages/default.yml","hash":"65c2bbbccf792d4e2bd1be9a25d52cf567fa79a4","modified":1562764388084},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1531376032019},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1562766310060},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1531376032019},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1531376032020},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1531376032020},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1531376032020},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1531376032020},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1531376032020},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1531376032021},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1531376032021},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1531376032021},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1531376032021},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1531376032021},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1531376032022},{"_id":"themes/next/layout/_layout.swig","hash":"d6bf48b47e5486b7e8c8bd31dc985e0aa512e545","modified":1562766310061},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1531376032037},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1531376032037},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1531376032037},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1531376032037},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1531376032038},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1531376032038},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1531376032038},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1531376032039},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1531376032039},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1531376032118},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1531376032118},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1531376032119},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1531376032066},{"_id":"source/_posts/FE /Fetch请求.md","hash":"7ac3772c306669850ab23980ef47a19a90ab0d89","modified":1562661407130},{"_id":"source/_posts/FE /JS基础（一）.md","hash":"dc9975723fb39974a25e1f703be8d0f7932074c1","modified":1563244363388},{"_id":"source/_posts/FE /JS基础（三）.md","hash":"2040cbaba2392c52e0f48bd19f89cbfcf0e84971","modified":1562826243644},{"_id":"source/_posts/FE /JS基础（二） toString、valueOf、Symbol.toPrimitive .md","hash":"d6a070c9a82646f5d22bb4615648ca944d419350","modified":1562765395970},{"_id":"source/_posts/FE /Promise对象.md","hash":"acf97c8f303b25111e1346714446515d9f4b5605","modified":1562677515327},{"_id":"source/_posts/Tools/git常用命令及问题汇总.md","hash":"33b7dc8274eb15cbf849371f7442d85d54b1e27f","modified":1562830972640},{"_id":"source/_posts/Tools/hexo主题theme无法提交.md","hash":"961dc782e3b50c9afe2c8879bd13145e6093e0a5","modified":1562683093035},{"_id":"source/_posts/Tools/图片自动上传工具picgo.md","hash":"db1b22c01da21369db44d8c66de870b845d11d17","modified":1563975308993},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1531376032022},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1531376032022},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1531376032022},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1531376032023},{"_id":"themes/next/layout/_macro/post.swig","hash":"ec76e8f5029a1a4dd2d5e6360f65e029354c213e","modified":1562767281883},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1531376032023},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1531376032023},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1531376032023},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1531376032024},{"_id":"themes/next/layout/_partials/footer.swig","hash":"6fe900b76cc0dda79b256664b6518e933214f54f","modified":1562764492950},{"_id":"themes/next/layout/_partials/head.swig","hash":"bf187efd15cca3de54c16eedf62a8f44b0f95e92","modified":1562685360466},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1531376032025},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1531376032026},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1531376032026},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1531376032026},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1531376032029},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1531376032029},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1531376032030},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1531376032034},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1531376032034},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1531376032034},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1531376032035},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1531376032035},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1531376032035},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1531376032035},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1531376032040},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1531376032040},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1531376032040},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1531376032040},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1531376032041},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1531376032041},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1531376032041},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1531376032041},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1531376032041},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1531376032065},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1531376032066},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1531376032066},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1531376032066},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1531376032067},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1531376032067},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1531376032068},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1531376032068},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1531376032068},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1531376032069},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1531376032069},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1531376032069},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1531376032070},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1531376032070},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1531376032070},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1531376032070},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1531376032070},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1531376032070},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1531376032071},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1531376032029},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1531376032030},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1531376032058},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1531376032059},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1531376032059},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1531376032065},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1531376032065},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1531376032025},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1531376032025},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1531376032027},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1531376032027},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1531376032027},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1531376032027},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1531376032028},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1531376032028},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1531376032028},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1531376032029},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1531376032029},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1531376032030},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1531376032030},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1531376032030},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1531376032031},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"4aa55cd424389cf5626aa019c15ef6f3e4da09f2","modified":1562767020034},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1531376032031},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1531376032031},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1531376032031},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1531376032032},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1531376032032},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"5010a28ef62f933a165bea533aa14599cd8951b9","modified":1562764933753},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1531376032032},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1531376032032},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1531376032033},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1531376032033},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1531376032033},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1531376032033},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1531376032033},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1531376032033},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1531376032033},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1531376032034},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"b27de964ed881b9971244ca47ebcf8fc5334cf6c","modified":1562654225348},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1531376032034},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1531376032036},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1531376032036},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1531376032036},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1531376032037},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1531376032058},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1531376032058},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1531376032059},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1531376032059},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1531376032064},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1531376032064},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1531376032065},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1531376032065},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1531376032071},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1531376032071},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1531376032071},{"_id":"themes/next/source/js/src/clicklove.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1562255267395},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1531376032072},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1531376032072},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1531376032072},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1531376032072},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1531376032073},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1531376032073},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1531376032073},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1531376032074},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1531376032078},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1531376032082},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1531376032083},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1531376032083},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1531376032083},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1531376032087},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1531376032088},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1531376032088},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1531376032088},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1531376032089},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1531376032089},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1531376032090},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1531376032090},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1531376032090},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1531376032102},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1531376032105},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1531376032105},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1531376032106},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1531376032104},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1531376032104},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1531376032104},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1531376032105},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1531376032104},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1531376032105},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1531376032106},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1531376032106},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1531376032107},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1531376032107},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1531376032107},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1531376032107},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1531376032107},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1531376032108},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1531376032108},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1531376032108},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1531376032108},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1531376032109},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1531376032109},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1531376032109},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1531376032110},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1531376032110},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1531376032110},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1531376032115},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1531376032115},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1531376032117},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1531376032118},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1531376032118},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1531376032103},{"_id":"source/pdf/react-router-1.pdf","hash":"2d565c98289ed86924edba3d32680faf1d3261e1","modified":1562661407137},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1531376032036},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1531376032036},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1531376032042},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1531376032042},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1531376032042},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1531376032043},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1531376032043},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1531376032047},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1531376032052},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1531376032056},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1531376032057},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1531376032057},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1531376032057},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1531376032057},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1531376032057},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1531376032058},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1531376032059},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1531376032060},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1531376032060},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1531376032060},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1531376032060},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1531376032061},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1531376032061},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"fb1fe1e86e9198ea470dbd8de2bb13ef21e30a45","modified":1562656198598},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1531376032062},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1531376032062},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1531376032062},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1531376032062},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1531376032063},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1531376032063},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1531376032063},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1531376032063},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1531376032064},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1531376032064},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1531376032064},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1531376032073},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1531376032077},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1531376032078},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1531376032083},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1531376032084},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1531376032084},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1531376032084},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1531376032084},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1531376032084},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1531376032086},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1531376032087},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1531376032087},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1531376032088},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1531376032089},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1531376032090},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1531376032091},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1531376032091},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1531376032114},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1531376032114},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1531376032076},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1531376032077},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1531376032102},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1531376032102},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1531376032117},{"_id":"source/_posts/FE /react-router-1.pdf","hash":"2d565c98289ed86924edba3d32680faf1d3261e1","modified":1562661407133},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1531376032043},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1531376032043},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1531376032044},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1531376032044},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1531376032044},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1531376032044},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1531376032045},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1531376032045},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1531376032045},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1531376032046},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1531376032045},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1531376032046},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1531376032046},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1531376032046},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1531376032047},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1531376032047},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1531376032047},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1531376032047},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1531376032048},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1531376032048},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1531376032048},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1531376032048},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1531376032048},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1531376032048},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1531376032049},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1531376032049},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1531376032049},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1531376032049},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1531376032050},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1531376032050},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1531376032050},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1531376032050},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1531376032050},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1531376032051},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1531376032051},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1531376032051},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1531376032051},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1531376032052},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1531376032052},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1531376032052},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1531376032052},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1531376032053},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1531376032053},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1531376032053},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1531376032053},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1531376032053},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1531376032054},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1531376032054},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1531376032054},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1531376032054},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1531376032055},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1531376032055},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1531376032055},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1531376032055},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1531376032055},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1531376032055},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1531376032056},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1531376032056},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1531376032061},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1531376032062},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1531376032063},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1531376032074},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1531376032075},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1531376032075},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1531376032075},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1531376032076},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1531376032085},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1531376032085},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1531376032085},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1531376032085},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1531376032086},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1531376032086},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1531376032093},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1531376032095},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1531376032101},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1531376032082},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1531376032113},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1531376032099},{"_id":"source/.DS_Store","hash":"e803a863eec2ddf3c9304a9828d4d874826b5233","modified":1563530258279},{"_id":"source/_posts/.DS_Store","hash":"75ef16c691c73dcc700d8e4de92845a702ee7b99","modified":1563530258275},{"_id":"source/_posts/FE /CSS常用样式整理.md","hash":"6bdc2b794b47a4ebb3912f1e1a984e1b63cf9f7a","modified":1563441443438},{"_id":"source/_posts/FE /JS基础（三）JS运行机制 Event Loop.md","hash":"a5509fa14fba63bb5b72466169415ef4fc423579","modified":1562834164376},{"_id":"source/_posts/FE /JS基础（四）Proxy代理、Object.defineProperty详解及双向数据绑定实现.md","hash":"9bc33edc9aa50f0e899ea2fe10ed2df5a67c0c29","modified":1563852867427},{"_id":"source/_posts/FE /Promise详解.md","hash":"74dc4dddaccb8f45a9de1dfaf3522491a0b2f566","modified":1563176227794},{"_id":"source/_posts/FE /React-router4 分享 (一).md","hash":"acf97c8f303b25111e1346714446515d9f4b5605","modified":1562839709421},{"_id":"source/_posts/FE /node/koa教程.md","hash":"cd30087ad22f70b01c7514662f245e5249d17cc7","modified":1563974859321},{"_id":"source/_posts/FE /node/node常用模块.md","hash":"4e0f9ce0f5cdcceb553378720f0275cd37e0a005","modified":1564394933670},{"_id":"source/_posts/Tools/mac开发效率提升小技巧.md","hash":"27884dcdb87367abdb8282995ba53427f8679e42","modified":1563968942207},{"_id":"source/_posts/FE /node/koa 使用 redis教程.md","hash":"5b5ae681dc208871ff2217956673a543d55be622","modified":1564045445346},{"_id":"public/search.xml","hash":"47729b9eb6c06bad7be2a3cee50346f43edf7c9a","modified":1564493927876},{"_id":"public/categories/index.html","hash":"4784b79e3dda412b7edf2a3f5fbfa5c5f17098bf","modified":1564493928082},{"_id":"public/about/index.html","hash":"23705058fe0fc66cbc4cc7fabeff0c5767223fa8","modified":1564493928084},{"_id":"public/schedule/index.html","hash":"afcd2cbb79c6703a83c1e99f20194b46e75d3f48","modified":1564493928085},{"_id":"public/tags/index.html","hash":"cf5976b8ac639aba116c7b89d0273a81809377aa","modified":1564493928086},{"_id":"public/2019/07/10/FE /JS基础（二） toString、valueOf、Symbol.toPrimitive /index.html","hash":"3680ab6226564735a8a92b16c7e18ac40af63fb4","modified":1564493928086},{"_id":"public/2019/07/09/Tools/git常用命令及问题汇总/index.html","hash":"205b5d559ba7bb9c41136ccb8613466aa22f96f8","modified":1564493928086},{"_id":"public/2019/07/06/FE /JS基础（一）/index.html","hash":"836802adc9a4d14b6876f36e8584f508f7598429","modified":1564493928087},{"_id":"public/2019/07/09/Tools/hexo主题theme无法提交/index.html","hash":"87e15409a4c7776591ad91c9c760aec1b02275dd","modified":1564493928086},{"_id":"public/archives/index.html","hash":"31b2294ba30272bfc34317271a8728b9ea33a6b1","modified":1564493928087},{"_id":"public/2019/07/03/Tools/图片自动上传工具picgo/index.html","hash":"1dc123a78ad09ac9123515a1d022fbbc415f07b2","modified":1564493928087},{"_id":"public/2019/07/03/FE /Fetch请求/index.html","hash":"85e03edea07abee90cda221cecb554bf21dab930","modified":1564493928087},{"_id":"public/archives/2019/index.html","hash":"c3ed2070c16476b38e493ab012947a12c6dc1cee","modified":1564493928087},{"_id":"public/archives/2019/07/index.html","hash":"290491d75889e2f7d5887b4e9d7875ad78fea048","modified":1564493928087},{"_id":"public/categories/前端/index.html","hash":"8d14a954cd35e55a0d53f407ca1afe4e2db0050d","modified":1564493928087},{"_id":"public/categories/工具/index.html","hash":"349e251b30964d9f6a56c169280048b65020f54e","modified":1564493928088},{"_id":"public/index.html","hash":"f08074440b25a96ad1f7792d822134b0d756fe38","modified":1564493928087},{"_id":"public/tags/js/index.html","hash":"0121394431e500e63212fdc347fe80e775847b89","modified":1564493928088},{"_id":"public/tags/react/index.html","hash":"9f87464b1496e3503de2290cb7f1071b8d5821e5","modified":1564493928088},{"_id":"public/tags/VS-Code/index.html","hash":"37087499f4671276785703fc2856f420bf239914","modified":1564493928088},{"_id":"public/tags/hexo/index.html","hash":"7e5b98639794ff57aa2b754ae3a32a9f4c907f4f","modified":1564493928088},{"_id":"public/tags/git/index.html","hash":"1f6375f37f28c8eabfce351a057082033a759b57","modified":1564493928088},{"_id":"public/2019/07/25/FE /node/koa 使用 redis教程/index.html","hash":"6fe9fdb942aa7bac4505f505481fa21fc92fed93","modified":1564493928086},{"_id":"public/2019/07/24/FE /node/koa教程/index.html","hash":"c276710eb5348604b2bae53e617398e1067b04d9","modified":1564493928086},{"_id":"public/2019/07/23/Tools/mac开发效率提升小技巧/index.html","hash":"04e91a173030f07057a6e39f84981e67f18f4b92","modified":1564493928086},{"_id":"public/2019/07/23/FE /node/node常用模块/index.html","hash":"f38f7402af1c340ffe4ed739bbb53b8faac6ff4e","modified":1564043989460},{"_id":"public/2019/07/16/FE /JS基础（四）Proxy代理、Object.defineProperty详解及双向数据绑定实现/index.html","hash":"fa16b2d596897c642ace4c50bef4c1f48070c4b5","modified":1564493928086},{"_id":"public/2019/07/15/FE /Promise详解/index.html","hash":"1c00116860abd52d5389b612e77ed7e9733c5a6c","modified":1564493928086},{"_id":"public/2019/07/15/FE /CSS常用样式整理/index.html","hash":"4c69e3aaa00c06d072a43806896dc9b04fa3b531","modified":1564493928086},{"_id":"public/2019/07/11/FE /JS基础（三）JS运行机制 Event Loop/index.html","hash":"75e3a281ae7569eddba6acb11f0601a02472745a","modified":1564493928086},{"_id":"public/2019/07/05/FE /React-router4 分享 (一)/index.html","hash":"a7dbd3dc9affd1547b0e445ddf7560c2cd419ea9","modified":1564493928087},{"_id":"public/archives/page/2/index.html","hash":"d3fb7c35b591bc3bfce78617dec718b86335e918","modified":1564493928087},{"_id":"public/archives/2019/page/2/index.html","hash":"14e88073dfd8a0fdda89f1e1381af7730f453eac","modified":1564493928087},{"_id":"public/archives/2019/07/page/2/index.html","hash":"81b41d1907ec75c2fd551a2b164811dddcfccaee","modified":1564493928087},{"_id":"public/tags/mac/index.html","hash":"dda8ac0b782dbcbe71ca7105d7aea715c77f8c9e","modified":1564493928088},{"_id":"public/tags/node/index.html","hash":"14807dd3418ded312042cf8af9d481ab3f6c5235","modified":1564493928088},{"_id":"public/tags/css/index.html","hash":"9c96eb3adfb831e7477d5dc587678f584bbd7b8c","modified":1564493928088},{"_id":"public/page/2/index.html","hash":"7ed57f8b6905152c90d66e56dd6249293a61cb36","modified":1564493928087},{"_id":"public/tags/koa/index.html","hash":"d825b732620579963b62e96e293dfe0342e8fdb6","modified":1564493928088},{"_id":"public/live2dw/assets/hijiki.pose.json","hash":"81438bf69b32c7c11e311b4fe043730cdc7b7ec2","modified":1564043989461},{"_id":"public/live2dw/assets/hijiki.model.json","hash":"feff43bf7498d213982c3736c2c029664e4bcbd2","modified":1564043989461},{"_id":"public/live2dw/assets/mtn/03.mtn","hash":"f900737c7a98441cbb2e05255427e6260e19ae68","modified":1564043989461},{"_id":"public/live2dw/assets/mtn/00_idle.mtn","hash":"b224c60e463b9f71ddbfc0c720e430496c175f4f","modified":1564043989461},{"_id":"public/live2dw/assets/mtn/01.mtn","hash":"fb550833ae22c9954c3e01df37ed29b2d61700f2","modified":1564043989461},{"_id":"public/live2dw/assets/mtn/02.mtn","hash":"7eafc52edc73b7cb80ae70d34b43c6ac778fa47b","modified":1564043989461},{"_id":"public/live2dw/assets/mtn/04.mtn","hash":"c7a25d3c5d783639bae18db2f3cd284b819c3c85","modified":1564043989461},{"_id":"public/live2dw/assets/mtn/05.mtn","hash":"dd20ad24b5d1830a5d44b9bccb28f922eea5e0e5","modified":1564043989461},{"_id":"public/live2dw/assets/mtn/06.mtn","hash":"ad404bd852d276cdd3d054c953e23f90e4e45ae1","modified":1564043989462},{"_id":"public/live2dw/assets/mtn/07.mtn","hash":"b7f2e3a9fa4f3ffbb6e64a08f8d9f45ca1868ffb","modified":1564043989462},{"_id":"public/live2dw/assets/mtn/08.mtn","hash":"4411c7651ff65195b113d95e7d5ebef8a59a37d9","modified":1564043989462},{"_id":"public/live2dw/lib/L2Dwidget.min.js","hash":"5f1a807437cc723bcadc3791d37add5ceed566a2","modified":1564043989462},{"_id":"public/live2dw/lib/L2Dwidget.min.js.map","hash":"3290fe2df45f065b51a1cd7b24ec325cbf9bb5ce","modified":1564043989465},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js","hash":"35bb5b588b6de25c9be2dd51d3fd331feafac02d","modified":1564043989466},{"_id":"public/live2dw/assets/moc/hijiki.moc","hash":"44289e62545a7046e0f5231103a851750b78524e","modified":1564043989469},{"_id":"public/live2dw/assets/moc/hijiki.2048/texture_00.png","hash":"66464e0d96439695b5542c5e2f5be60739c29999","modified":1564043989472},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js.map","hash":"35e71cc2a130199efb167b9a06939576602f0d75","modified":1564043989480},{"_id":"source/_posts/FE /node/koa解决跨域问题.md","hash":"40f6278b3b4923e92a44a2c207cd9fc2d8df027c","modified":1564493737599},{"_id":"source/_posts/FE /node/koa使用mysql教程.md","hash":"f67dbf4055e95cddf497b4cceeacd31d1b0a7807","modified":1564480746251},{"_id":"public/2019/07/30/FE /node/koa使用mysql教程/index.html","hash":"03b87b4cffa245d647c0a686eb40f8d20af5d88b","modified":1564493928092},{"_id":"public/2019/07/30/FE /node/koa解决跨域问题/index.html","hash":"78d2c3979ed144c6dc33fca9ce6ba32cc9f11787","modified":1564493928092},{"_id":"public/2019/07/29/FE /node/node常用模块/index.html","hash":"9988d0d3e9b0c387bcd68bb5dd8c5573689087c5","modified":1564493928092},{"_id":"public/categories/前端/page/2/index.html","hash":"e045c94257cb64dfbe22bfd2d182040563ee7e6c","modified":1564493928092}],"Category":[{"name":"前端","_id":"cjxyaefh80006d9v9jz826kfb"},{"name":"工具","_id":"cjxyaefhm000od9v9i0hl4bna"}],"Data":[],"Page":[{"title":"categories","date":"2019-07-04T12:10:39.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-07-04 20:10:39\n---\n","updated":"2019-07-09T08:36:47.134Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjxyaefb10000d9v9o8l79ia9","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"关于","date":"2019-05-23T06:43:50.000Z","_content":"\n#### 简介\n昵称：Leory\n\n邮箱：it_lilei@sina.com\n\ngithub：https://github.com/itlilei \n\n新的博客地址，将之前的文章和笔记重新整理了一遍，还有一些之前自己的分享。","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2019-05-23 14:43:50\n---\n\n#### 简介\n昵称：Leory\n\n邮箱：it_lilei@sina.com\n\ngithub：https://github.com/itlilei \n\n新的博客地址，将之前的文章和笔记重新整理了一遍，还有一些之前自己的分享。","updated":"2019-07-09T15:10:17.634Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjxyaefb30001d9v9a4xtrmv0","content":"<h4 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h4><p>昵称：Leory</p>\n<p>邮箱：<a href=\"mailto:it_lilei@sina.com\" target=\"_blank\" rel=\"noopener\">it_lilei@sina.com</a></p>\n<p>github：<a href=\"https://github.com/itlilei\" target=\"_blank\" rel=\"noopener\">https://github.com/itlilei</a> </p>\n<p>新的博客地址，将之前的文章和笔记重新整理了一遍，还有一些之前自己的分享。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h4><p>昵称：Leory</p>\n<p>邮箱：<a href=\"mailto:it_lilei@sina.com\" target=\"_blank\" rel=\"noopener\">it_lilei@sina.com</a></p>\n<p>github：<a href=\"https://github.com/itlilei\" target=\"_blank\" rel=\"noopener\">https://github.com/itlilei</a> </p>\n<p>新的博客地址，将之前的文章和笔记重新整理了一遍，还有一些之前自己的分享。</p>\n"},{"title":"schedule","date":"2019-07-04T12:05:16.000Z","_content":"","source":"schedule/index.md","raw":"---\ntitle: schedule\ndate: 2019-07-04 20:05:16\n---\n","updated":"2019-07-09T08:36:47.137Z","path":"schedule/index.html","comments":1,"layout":"page","_id":"cjxyaefb40002d9v9054s1qqx","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2019-07-04T12:03:00.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-07-04 20:03:00\ntype: tags\n---\n","updated":"2019-07-09T08:36:47.138Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjxyaefft0003d9v92bkre6yt","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Fetch请求","date":"2019-07-02T16:00:00.000Z","_content":"\n### 基本的fetch请求\n\n``` bash\nconst options = {\n    method: \"POST\", // 请求参数\n    headers: { \"Content-Type\": \"application/json\"}, // 设置请求头   或者通过：new Headers({'Content-Type': 'application/json' })\n    body: JSON.stringify({name:'123'}), // 请求参数\n    credentials: \"same-origin\", // cookie设置\n    mode: \"cors\", // 跨域\n}\nfetch('url'，options)\n    .then(function(response) {\n        return response.json();\n    })\n    .then(function(myJson) {\n        console.log(myJson); // 响应数据\n    })\n.catch(function(err){\n    console.log(err); // 异常处理\n    })\n\n```\n>fetch 请求返回promise对象 默认情况下，fetch 不会从服务端发送或接收任何 cookies，如果需发送cookie，必须设置 credentials 对象（下面会详细介绍）\n\n### 涉及到的对象\n#### 1. Request对象 \n```bash\nconst myRequest = new Request('http://localhost/api', {method: 'POST', body: '{\"foo\":\"bar\"}'});\n \nconst myURL = myRequest.url; // http://localhost/api\nconst myMethod = myRequest.method; // POST\nconst myCred = myRequest.credentials; // omit\nconst bodyUsed = myRequest.bodyUsed; // true\n\n```\n>##### credentials有三个可选值（官方文档说现在的默认值修改为：same-origin）\n>omit: 从不发送cookies.\n>same-origin: 只有当URL与响应脚本同源才发送 cookies、 HTTP Basic authentication 等验证信息.(浏览器默认值,在旧版本浏览器，例如safari 11依旧是omit，safari 12已更改)\n>include: 不论是不是跨域的请求,总是发送请求资源域在本地的 cookies、 HTTP Basic authentication 等验证信息\n","source":"_posts/FE /Fetch请求.md","raw":"---\ntitle: Fetch请求\ndate: 2019-07-03\ntags: js\ncategories: 前端\n---\n\n### 基本的fetch请求\n\n``` bash\nconst options = {\n    method: \"POST\", // 请求参数\n    headers: { \"Content-Type\": \"application/json\"}, // 设置请求头   或者通过：new Headers({'Content-Type': 'application/json' })\n    body: JSON.stringify({name:'123'}), // 请求参数\n    credentials: \"same-origin\", // cookie设置\n    mode: \"cors\", // 跨域\n}\nfetch('url'，options)\n    .then(function(response) {\n        return response.json();\n    })\n    .then(function(myJson) {\n        console.log(myJson); // 响应数据\n    })\n.catch(function(err){\n    console.log(err); // 异常处理\n    })\n\n```\n>fetch 请求返回promise对象 默认情况下，fetch 不会从服务端发送或接收任何 cookies，如果需发送cookie，必须设置 credentials 对象（下面会详细介绍）\n\n### 涉及到的对象\n#### 1. Request对象 \n```bash\nconst myRequest = new Request('http://localhost/api', {method: 'POST', body: '{\"foo\":\"bar\"}'});\n \nconst myURL = myRequest.url; // http://localhost/api\nconst myMethod = myRequest.method; // POST\nconst myCred = myRequest.credentials; // omit\nconst bodyUsed = myRequest.bodyUsed; // true\n\n```\n>##### credentials有三个可选值（官方文档说现在的默认值修改为：same-origin）\n>omit: 从不发送cookies.\n>same-origin: 只有当URL与响应脚本同源才发送 cookies、 HTTP Basic authentication 等验证信息.(浏览器默认值,在旧版本浏览器，例如safari 11依旧是omit，safari 12已更改)\n>include: 不论是不是跨域的请求,总是发送请求资源域在本地的 cookies、 HTTP Basic authentication 等验证信息\n","slug":"FE /Fetch请求","published":1,"updated":"2019-07-15T10:28:16.001Z","_id":"cjxyaefh20004d9v94i39clgv","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"基本的fetch请求\"><a href=\"#基本的fetch请求\" class=\"headerlink\" title=\"基本的fetch请求\"></a>基本的fetch请求</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const options = &#123;</span><br><span class=\"line\">    method: <span class=\"string\">\"POST\"</span>, // 请求参数</span><br><span class=\"line\">    headers: &#123; <span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"application/json\"</span>&#125;, // 设置请求头   或者通过：new Headers(&#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/json'</span> &#125;)</span><br><span class=\"line\">    body: JSON.stringify(&#123;name:<span class=\"string\">'123'</span>&#125;), // 请求参数</span><br><span class=\"line\">    credentials: <span class=\"string\">\"same-origin\"</span>, // cookie设置</span><br><span class=\"line\">    mode: <span class=\"string\">\"cors\"</span>, // 跨域</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fetch(<span class=\"string\">'url'</span>，options)</span><br><span class=\"line\">    .<span class=\"keyword\">then</span>(<span class=\"keyword\">function</span>(response) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> response.json();</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .<span class=\"keyword\">then</span>(<span class=\"keyword\">function</span>(myJson) &#123;</span><br><span class=\"line\">        console.log(myJson); // 响应数据</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">.catch(<span class=\"keyword\">function</span>(err)&#123;</span><br><span class=\"line\">    console.log(err); // 异常处理</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>fetch 请求返回promise对象 默认情况下，fetch 不会从服务端发送或接收任何 cookies，如果需发送cookie，必须设置 credentials 对象（下面会详细介绍）</p>\n</blockquote>\n<h3 id=\"涉及到的对象\"><a href=\"#涉及到的对象\" class=\"headerlink\" title=\"涉及到的对象\"></a>涉及到的对象</h3><h4 id=\"1-Request对象\"><a href=\"#1-Request对象\" class=\"headerlink\" title=\"1. Request对象\"></a>1. Request对象</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const myRequest = new Request(<span class=\"string\">'http://localhost/api'</span>, &#123;method: <span class=\"string\">'POST'</span>, body: <span class=\"string\">'&#123;\"foo\":\"bar\"&#125;'</span>&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">const myURL = myRequest.url; // http://localhost/api</span><br><span class=\"line\">const myMethod = myRequest.method; // POST</span><br><span class=\"line\">const myCred = myRequest.credentials; // omit</span><br><span class=\"line\">const bodyUsed = myRequest.bodyUsed; // <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<h5 id=\"credentials有三个可选值（官方文档说现在的默认值修改为：same-origin）\"><a href=\"#credentials有三个可选值（官方文档说现在的默认值修改为：same-origin）\" class=\"headerlink\" title=\"credentials有三个可选值（官方文档说现在的默认值修改为：same-origin）\"></a>credentials有三个可选值（官方文档说现在的默认值修改为：same-origin）</h5><p>omit: 从不发送cookies.<br>same-origin: 只有当URL与响应脚本同源才发送 cookies、 HTTP Basic authentication 等验证信息.(浏览器默认值,在旧版本浏览器，例如safari 11依旧是omit，safari 12已更改)<br>include: 不论是不是跨域的请求,总是发送请求资源域在本地的 cookies、 HTTP Basic authentication 等验证信息</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"基本的fetch请求\"><a href=\"#基本的fetch请求\" class=\"headerlink\" title=\"基本的fetch请求\"></a>基本的fetch请求</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const options = &#123;</span><br><span class=\"line\">    method: <span class=\"string\">\"POST\"</span>, // 请求参数</span><br><span class=\"line\">    headers: &#123; <span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"application/json\"</span>&#125;, // 设置请求头   或者通过：new Headers(&#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/json'</span> &#125;)</span><br><span class=\"line\">    body: JSON.stringify(&#123;name:<span class=\"string\">'123'</span>&#125;), // 请求参数</span><br><span class=\"line\">    credentials: <span class=\"string\">\"same-origin\"</span>, // cookie设置</span><br><span class=\"line\">    mode: <span class=\"string\">\"cors\"</span>, // 跨域</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fetch(<span class=\"string\">'url'</span>，options)</span><br><span class=\"line\">    .<span class=\"keyword\">then</span>(<span class=\"keyword\">function</span>(response) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> response.json();</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .<span class=\"keyword\">then</span>(<span class=\"keyword\">function</span>(myJson) &#123;</span><br><span class=\"line\">        console.log(myJson); // 响应数据</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">.catch(<span class=\"keyword\">function</span>(err)&#123;</span><br><span class=\"line\">    console.log(err); // 异常处理</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>fetch 请求返回promise对象 默认情况下，fetch 不会从服务端发送或接收任何 cookies，如果需发送cookie，必须设置 credentials 对象（下面会详细介绍）</p>\n</blockquote>\n<h3 id=\"涉及到的对象\"><a href=\"#涉及到的对象\" class=\"headerlink\" title=\"涉及到的对象\"></a>涉及到的对象</h3><h4 id=\"1-Request对象\"><a href=\"#1-Request对象\" class=\"headerlink\" title=\"1. Request对象\"></a>1. Request对象</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const myRequest = new Request(<span class=\"string\">'http://localhost/api'</span>, &#123;method: <span class=\"string\">'POST'</span>, body: <span class=\"string\">'&#123;\"foo\":\"bar\"&#125;'</span>&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">const myURL = myRequest.url; // http://localhost/api</span><br><span class=\"line\">const myMethod = myRequest.method; // POST</span><br><span class=\"line\">const myCred = myRequest.credentials; // omit</span><br><span class=\"line\">const bodyUsed = myRequest.bodyUsed; // <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<h5 id=\"credentials有三个可选值（官方文档说现在的默认值修改为：same-origin）\"><a href=\"#credentials有三个可选值（官方文档说现在的默认值修改为：same-origin）\" class=\"headerlink\" title=\"credentials有三个可选值（官方文档说现在的默认值修改为：same-origin）\"></a>credentials有三个可选值（官方文档说现在的默认值修改为：same-origin）</h5><p>omit: 从不发送cookies.<br>same-origin: 只有当URL与响应脚本同源才发送 cookies、 HTTP Basic authentication 等验证信息.(浏览器默认值,在旧版本浏览器，例如safari 11依旧是omit，safari 12已更改)<br>include: 不论是不是跨域的请求,总是发送请求资源域在本地的 cookies、 HTTP Basic authentication 等验证信息</p>\n</blockquote>\n"},{"title":"JS基础（一）变量 闭包 作用域","date":"2019-07-05T16:00:00.000Z","_content":"\n#### <label style=\"color:#1E90FF\">let、const、var 的区别</label>\n|声明方式|变量提升|暂时性死区|重复声明|块作用域有效|初始值|重新赋值|\n|:----:||:----:||:----:||:----:||:----:||:----:||:----:|\n|var|会\t|不存在\t|允许\t|不是\t|非必须\t|允许|\n|let|不会\t|存在\t|不允许\t|是\t|非必须\t|允许|\n|const|不会\t|存在\t|不允许\t|是\t|必须\t|不允许|\n\n块级作用域有效的解释：let/const 声明的变量仅在块级作用域中有效。而 var 声明的变量在块级作用域外仍能访问到。\n```javascript\n{\n    let a = 10;\n    const b = 20;\n    var c = 30;\n}\nconsole.log(a); //ReferenceError\nconsole.log(b); //ReferenceError\nconsole.log(c); //30\n```\n看一个例子,a[0] 到a[9] 的结果都是 10 ：\n```javascript\nvar a = [];\nfor (var i = 0; i < 10; i++) {\n    a[i] = function () {\n        console.log(i);\n    };\n}\n```\n解决这个问题，可以使用闭包：\n```javascript\nvar a = [];\nfor (var i = 0; i < 10; i++) {\n    a[i] = (function(j){\n        return function () {\n            console.log(j);\n        }\n    })(i)\n}\na[6](); // 6\n```\n或者使用let：\n```javascript\nvar a = [];\nfor (let i = 0; i < 10; i++) {\n    a[i] = function () {\n        console.log(i);\n    };\n}\na[6](); // 6\n```\n贴一张babel转义后的截图，看着会更容易理解一些。\n![20190711170815.png](https://raw.githubusercontent.com/itlilei/pic/master/20190711170815.png)\n\n\n暂时性死区的解释：使用let、const命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（temporal dead zone，简称 TDZ）\n\n“暂时性死区”也意味着typeof不再是一个百分之百安全的操作\n\n![20190711172237.png](https://raw.githubusercontent.com/itlilei/pic/master/20190711172237.png)\n\n#### <label style=\"color:#1E90FF\">闭包</label>\n\n#### <label style=\"color:#1E90FF\">可遍历对象 Iterator</label>\n\n#### <label style=\"color:#1E90FF\">new 实现原理</label>\n#### <label style=\"color:#1E90FF\">双向数据绑定实现原理</label>","source":"_posts/FE /JS基础（一）.md","raw":"---\ntitle: JS基础（一）变量 闭包 作用域\ndate: 2019-07-06\ntags: js\ncategories: 前端\n---\n\n#### <label style=\"color:#1E90FF\">let、const、var 的区别</label>\n|声明方式|变量提升|暂时性死区|重复声明|块作用域有效|初始值|重新赋值|\n|:----:||:----:||:----:||:----:||:----:||:----:||:----:|\n|var|会\t|不存在\t|允许\t|不是\t|非必须\t|允许|\n|let|不会\t|存在\t|不允许\t|是\t|非必须\t|允许|\n|const|不会\t|存在\t|不允许\t|是\t|必须\t|不允许|\n\n块级作用域有效的解释：let/const 声明的变量仅在块级作用域中有效。而 var 声明的变量在块级作用域外仍能访问到。\n```javascript\n{\n    let a = 10;\n    const b = 20;\n    var c = 30;\n}\nconsole.log(a); //ReferenceError\nconsole.log(b); //ReferenceError\nconsole.log(c); //30\n```\n看一个例子,a[0] 到a[9] 的结果都是 10 ：\n```javascript\nvar a = [];\nfor (var i = 0; i < 10; i++) {\n    a[i] = function () {\n        console.log(i);\n    };\n}\n```\n解决这个问题，可以使用闭包：\n```javascript\nvar a = [];\nfor (var i = 0; i < 10; i++) {\n    a[i] = (function(j){\n        return function () {\n            console.log(j);\n        }\n    })(i)\n}\na[6](); // 6\n```\n或者使用let：\n```javascript\nvar a = [];\nfor (let i = 0; i < 10; i++) {\n    a[i] = function () {\n        console.log(i);\n    };\n}\na[6](); // 6\n```\n贴一张babel转义后的截图，看着会更容易理解一些。\n![20190711170815.png](https://raw.githubusercontent.com/itlilei/pic/master/20190711170815.png)\n\n\n暂时性死区的解释：使用let、const命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（temporal dead zone，简称 TDZ）\n\n“暂时性死区”也意味着typeof不再是一个百分之百安全的操作\n\n![20190711172237.png](https://raw.githubusercontent.com/itlilei/pic/master/20190711172237.png)\n\n#### <label style=\"color:#1E90FF\">闭包</label>\n\n#### <label style=\"color:#1E90FF\">可遍历对象 Iterator</label>\n\n#### <label style=\"color:#1E90FF\">new 实现原理</label>\n#### <label style=\"color:#1E90FF\">双向数据绑定实现原理</label>","slug":"FE /JS基础（一）","published":1,"updated":"2019-07-16T02:32:43.388Z","_id":"cjxyaefh60005d9v9r9r151lm","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"let、const、var-的区别\"><a href=\"#let、const、var-的区别\" class=\"headerlink\" title=\"let、const、var 的区别\"></a><label style=\"color:#1E90FF\">let、const、var 的区别</label></h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">声明方式</th>\n<th>变量提升</th>\n<th style=\"text-align:center\">暂时性死区</th>\n<th>重复声明</th>\n<th style=\"text-align:center\">块作用域有效</th>\n<th>初始值</th>\n<th style=\"text-align:center\">重新赋值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">var</td>\n<td>会</td>\n<td style=\"text-align:center\">不存在</td>\n<td>允许</td>\n<td style=\"text-align:center\">不是</td>\n<td>非必须</td>\n<td style=\"text-align:center\">允许</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">let</td>\n<td>不会</td>\n<td style=\"text-align:center\">存在</td>\n<td>不允许</td>\n<td style=\"text-align:center\">是</td>\n<td>非必须</td>\n<td style=\"text-align:center\">允许</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">const</td>\n<td>不会</td>\n<td style=\"text-align:center\">存在</td>\n<td>不允许</td>\n<td style=\"text-align:center\">是</td>\n<td>必须</td>\n<td style=\"text-align:center\">不允许</td>\n</tr>\n</tbody>\n</table>\n<p>块级作用域有效的解释：let/const 声明的变量仅在块级作用域中有效。而 var 声明的变量在块级作用域外仍能访问到。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> c = <span class=\"number\">30</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">//ReferenceError</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">//ReferenceError</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c); <span class=\"comment\">//30</span></span><br></pre></td></tr></table></figure></p>\n<p>看一个例子,a[0] 到a[9] 的结果都是 10 ：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    a[i] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>解决这个问题，可以使用闭包：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    a[i] = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">j</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(j);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)(i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a[<span class=\"number\">6</span>](); <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure></p>\n<p>或者使用let：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    a[i] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a[<span class=\"number\">6</span>](); <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure></p>\n<p>贴一张babel转义后的截图，看着会更容易理解一些。<br><img src=\"https://raw.githubusercontent.com/itlilei/pic/master/20190711170815.png\" alt=\"20190711170815.png\"></p>\n<p>暂时性死区的解释：使用let、const命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（temporal dead zone，简称 TDZ）</p>\n<p>“暂时性死区”也意味着typeof不再是一个百分之百安全的操作</p>\n<p><img src=\"https://raw.githubusercontent.com/itlilei/pic/master/20190711172237.png\" alt=\"20190711172237.png\"></p>\n<h4 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a><label style=\"color:#1E90FF\">闭包</label></h4><h4 id=\"可遍历对象-Iterator\"><a href=\"#可遍历对象-Iterator\" class=\"headerlink\" title=\"可遍历对象 Iterator\"></a><label style=\"color:#1E90FF\">可遍历对象 Iterator</label></h4><h4 id=\"new-实现原理\"><a href=\"#new-实现原理\" class=\"headerlink\" title=\"new 实现原理\"></a><label style=\"color:#1E90FF\">new 实现原理</label></h4><h4 id=\"双向数据绑定实现原理\"><a href=\"#双向数据绑定实现原理\" class=\"headerlink\" title=\"双向数据绑定实现原理\"></a><label style=\"color:#1E90FF\">双向数据绑定实现原理</label></h4>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"let、const、var-的区别\"><a href=\"#let、const、var-的区别\" class=\"headerlink\" title=\"let、const、var 的区别\"></a><label style=\"color:#1E90FF\">let、const、var 的区别</label></h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">声明方式</th>\n<th>变量提升</th>\n<th style=\"text-align:center\">暂时性死区</th>\n<th>重复声明</th>\n<th style=\"text-align:center\">块作用域有效</th>\n<th>初始值</th>\n<th style=\"text-align:center\">重新赋值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">var</td>\n<td>会</td>\n<td style=\"text-align:center\">不存在</td>\n<td>允许</td>\n<td style=\"text-align:center\">不是</td>\n<td>非必须</td>\n<td style=\"text-align:center\">允许</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">let</td>\n<td>不会</td>\n<td style=\"text-align:center\">存在</td>\n<td>不允许</td>\n<td style=\"text-align:center\">是</td>\n<td>非必须</td>\n<td style=\"text-align:center\">允许</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">const</td>\n<td>不会</td>\n<td style=\"text-align:center\">存在</td>\n<td>不允许</td>\n<td style=\"text-align:center\">是</td>\n<td>必须</td>\n<td style=\"text-align:center\">不允许</td>\n</tr>\n</tbody>\n</table>\n<p>块级作用域有效的解释：let/const 声明的变量仅在块级作用域中有效。而 var 声明的变量在块级作用域外仍能访问到。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> c = <span class=\"number\">30</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">//ReferenceError</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">//ReferenceError</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c); <span class=\"comment\">//30</span></span><br></pre></td></tr></table></figure></p>\n<p>看一个例子,a[0] 到a[9] 的结果都是 10 ：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    a[i] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>解决这个问题，可以使用闭包：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    a[i] = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">j</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(j);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)(i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a[<span class=\"number\">6</span>](); <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure></p>\n<p>或者使用let：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    a[i] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a[<span class=\"number\">6</span>](); <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure></p>\n<p>贴一张babel转义后的截图，看着会更容易理解一些。<br><img src=\"https://raw.githubusercontent.com/itlilei/pic/master/20190711170815.png\" alt=\"20190711170815.png\"></p>\n<p>暂时性死区的解释：使用let、const命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（temporal dead zone，简称 TDZ）</p>\n<p>“暂时性死区”也意味着typeof不再是一个百分之百安全的操作</p>\n<p><img src=\"https://raw.githubusercontent.com/itlilei/pic/master/20190711172237.png\" alt=\"20190711172237.png\"></p>\n<h4 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a><label style=\"color:#1E90FF\">闭包</label></h4><h4 id=\"可遍历对象-Iterator\"><a href=\"#可遍历对象-Iterator\" class=\"headerlink\" title=\"可遍历对象 Iterator\"></a><label style=\"color:#1E90FF\">可遍历对象 Iterator</label></h4><h4 id=\"new-实现原理\"><a href=\"#new-实现原理\" class=\"headerlink\" title=\"new 实现原理\"></a><label style=\"color:#1E90FF\">new 实现原理</label></h4><h4 id=\"双向数据绑定实现原理\"><a href=\"#双向数据绑定实现原理\" class=\"headerlink\" title=\"双向数据绑定实现原理\"></a><label style=\"color:#1E90FF\">双向数据绑定实现原理</label></h4>"},{"title":"JS基础（二） toString、valueOf、Symbol.toPrimitive 类型转换","date":"2019-07-09T16:00:00.000Z","_content":"\n### <label style=\"color:#1E90FF\">概述</label>\n\n__javascript 中几乎所有类型都具有toString和valueOf属性，而且他们都有各自的toString或valueOf方法的实现，特殊情况下边讲到。__\n\n```javascript\nArray.prototype.hasOwnProperty('valueOf');      //false\nFunction.prototype.hasOwnProperty('valueOf');   //false\nRegExp.prototype.hasOwnProperty('valueOf');     //false\n\n```\n只有<label style=\"color:red\">Array,Function,RegExp</label>的原型上没有valueOf属性,他们能有该方法是因为继承了Object，所以这三个对象调用的是Object原型上的valueOf。\n\n<label style=\"color:red;\">\n特殊情况:null和undefined不能转换为字符串,null和undefined调用toString()方法会报错。\n转字符串的另一种方法：String(),他可以将null和undefined转换为字符串。\n</label>\n\n### <label style=\"color:#1E90FF\">valueOf 介绍</label>\n\n__valueOf() 返回对象的原始值，如果对象没有原始值，valueOf() 就会返回对象自身。__\n\n|对象|返回值|\n|:----:|:----|\n|Array|返回数组对象本身|\n|Boolean|布尔值|\n|Date|返回时间的毫秒数|\n|Function|函数本身|\n|Number|数字的值|\n|Object|对象本身|\n|String|字符串的值|\n\n### <label style=\"color:#1E90FF\">toString 介绍</label>\n\n__toString的作用是将值转换为字符串__\n\n|对象|返回值|\n|:----:|:----|\n|Array|将数组元素转换为字符串，用逗号拼接并返回(a=[1,2]=> \"1,2\")|\n|Boolean|返回'true' 'false'|\n|Date|返回日期的字符串格式 \"Wed Jul 10 2019 18:21:07 GMT+0800 (中国标准时间)\"|\n|Function|函数本身的文本 \"function a(){console.log('function')}\"|\n|Number|返回文本表示，<label style=\"color:red\">可接收一个参数表示输出的进制数，默认为十进制</label>|\n|Object|返回 <label style=\"color:red\">\"[object 类型名]\"</label>|\n|String|字符串的值|\n\n### <label style=\"color:#1E90FF\">valueOf toString 使用场景</label>\n\n定义一个复杂对象，具体看下他们是如何执行的\n```javascript\nvar test = { \n i: 10, \n toString: function() { \n    console.log('toString'); \n    return this.i; \n }, \n valueOf: function() { \n    console.log('valueOf'); \n    return this.i; \n } \n} \n\nalert(test);// 10 toString \nalert(+test); // 10 valueOf \nalert(''+test); // 10 valueOf \nalert(String(test)); // 10 toString \nalert(Number(test)); // 10 valueOf \nalert(test == '10'); // true valueOf \nalert(test === '10'); // false\n\n```\n结论\n    1. 在进行强转字符串类型时将优先调用toString方法，强转为数字时优先调用valueOf。\n    2. 在有运算操作符的情况下，valueOf的优先级高于toString。 \n    3. 这两个方法一般是交由js去隐式调用，以满足不同的运算情况。 \n    4. 在数值运算里，会优先调用valueOf()，如 a + b; \n    5. 在字符串运算里，会优先调用toString(),如alert(c).\n\n\n### <label style=\"color:#1E90FF\">Symbol.toPrimitive</label>\n\nES6 的详细介绍：\n>对象的Symbol.toPrimitive属性，指向一个方法。该对象被转为原始类型的值时，会调用这个方法，返回该对象对应的原始类型值。\n\n>Symbol.toPrimitive被调用时，会接受一个字符串参数，表示当前运算的模式，一共有三种模式。\n\n>    1. Number：该场合需要转成数值\n>    2. String：该场合需要转成字符串\n>    3. Default：该场合可以转成数值，也可以转成字符串\n```javascript\nlet obj = {\n  [Symbol.toPrimitive](hint) {\n    switch (hint) {\n      case 'number':\n        return 123;\n      case 'string':\n        return 'str';\n      case 'default':\n        return 'default';\n      default:\n        throw new Error();\n     }\n   }\n};\n\n2 * obj // 246\n3 + obj // '3default'\nobj == 'default' // true\nString(obj) // 'str'\n```\n可以通过一个例子看下三者的优先级\n```javascript\nlet ab = {\n    valueOf() {\n        return 0;\n    },\n    toString() {\n        return '1';\n    },\n    [Symbol.toPrimitive]() {\n        return 2;\n    }\n}\nconsole.log(1+ab);  //3\nconsole.log('1'+ab); //12\n```\n结论：在转换基本类型的时候，Symbol.toPrimitive 的优先级最高。\n### <label style=\"color:#1E90FF\">类型转换及原则</label>\n\n\n##### <label style=\"color:#B0C4DE\">双等号 == 的比较机制</label>\n\n__在判断的过程中会进行隐式的类型转换__\n\n    1.是否有NaN\n    首先判断双等号两边是否有NaN，如果有的话，则一律返回false。\n\n    2.是否有boolean值\n    如果有的话则将true转化为1，false转化为0。\n\n    3.null和undefined\n    遇到null或者undefined，则不会进行类型转换，它们相互的比较都返回true。\n\n    4.有一边是字符串,分四种情况：\n\n        1） 同样是字符串，则直接进行字符串值的比较\n\n        2） 是数字，则需要将字符串转化为数字，然后进行比较\n\n        3） 有布尔类型，则要将布尔类型转化为0或则1，然后进行比较\n\n        4） 对象或者数组类型，则需要调用toString()或者valueOf()方法转化成简单类型，然后进行比较\n\n对象转化为简单类型时会优先调用valueOf方法，如果可以与简单值进行比较则会直接比较，此时不再调用toString方法。\n如果调用valueOf方法后无法与简单值进行比较，则会再调用toString方法，最终得到比对的结果。\n但是需要注意的一点是Date对象不满足上述的规则，Date对象的toString和valueOf方法都是重新定义过的。默认会调用toString方法。\n\n### <label style=\"color:#1E90FF\">灵活运用：如何实现 (a == 1 && a == 2 && a == 3) 的值为true</label>\n分析：== 操作符在左右数据类型不一致时，会先进行隐式转换。a == 1 && a == 2 && a == 3 的值意味着其不可能是基本数据类型。因此 a 是复杂数据类型，JS 中复杂数据类型只有 object，根据上边讲到的object转换类型的方法，得出答案。\n\nSymbol.toPrimitive实现（其他两种亦可）： \n```javascript\nlet a = {\n    [Symbol.toPrimitive]: (function(hint) {\n            let i = 1;\n            //闭包的特性之一：i 不会被回收\n            return function() {\n                return i++;\n            }\n    })()\n}\nconsole.log(a == 1 && a == 2 && a == 3); //true\n```\n还有一种更简单的实现，上边讲到数组的toString 接口默认调用数组的 join 方法，所以可以重写数组的 join 方法（奇淫巧技）：\n\n```javascript\nlet a = [1, 2, 3];\na.join = a.shift;\nconsole.log(a == 1 && a == 2 && a == 3); //true\n```\n\n当然该问题还有很多其他的实现方式，后续讲到其他基础知识时再列举。","source":"_posts/FE /JS基础（二） toString、valueOf、Symbol.toPrimitive .md","raw":"---\ntitle: JS基础（二） toString、valueOf、Symbol.toPrimitive 类型转换\ndate: 2019-07-10\ntags: js\ncategories: 前端\n---\n\n### <label style=\"color:#1E90FF\">概述</label>\n\n__javascript 中几乎所有类型都具有toString和valueOf属性，而且他们都有各自的toString或valueOf方法的实现，特殊情况下边讲到。__\n\n```javascript\nArray.prototype.hasOwnProperty('valueOf');      //false\nFunction.prototype.hasOwnProperty('valueOf');   //false\nRegExp.prototype.hasOwnProperty('valueOf');     //false\n\n```\n只有<label style=\"color:red\">Array,Function,RegExp</label>的原型上没有valueOf属性,他们能有该方法是因为继承了Object，所以这三个对象调用的是Object原型上的valueOf。\n\n<label style=\"color:red;\">\n特殊情况:null和undefined不能转换为字符串,null和undefined调用toString()方法会报错。\n转字符串的另一种方法：String(),他可以将null和undefined转换为字符串。\n</label>\n\n### <label style=\"color:#1E90FF\">valueOf 介绍</label>\n\n__valueOf() 返回对象的原始值，如果对象没有原始值，valueOf() 就会返回对象自身。__\n\n|对象|返回值|\n|:----:|:----|\n|Array|返回数组对象本身|\n|Boolean|布尔值|\n|Date|返回时间的毫秒数|\n|Function|函数本身|\n|Number|数字的值|\n|Object|对象本身|\n|String|字符串的值|\n\n### <label style=\"color:#1E90FF\">toString 介绍</label>\n\n__toString的作用是将值转换为字符串__\n\n|对象|返回值|\n|:----:|:----|\n|Array|将数组元素转换为字符串，用逗号拼接并返回(a=[1,2]=> \"1,2\")|\n|Boolean|返回'true' 'false'|\n|Date|返回日期的字符串格式 \"Wed Jul 10 2019 18:21:07 GMT+0800 (中国标准时间)\"|\n|Function|函数本身的文本 \"function a(){console.log('function')}\"|\n|Number|返回文本表示，<label style=\"color:red\">可接收一个参数表示输出的进制数，默认为十进制</label>|\n|Object|返回 <label style=\"color:red\">\"[object 类型名]\"</label>|\n|String|字符串的值|\n\n### <label style=\"color:#1E90FF\">valueOf toString 使用场景</label>\n\n定义一个复杂对象，具体看下他们是如何执行的\n```javascript\nvar test = { \n i: 10, \n toString: function() { \n    console.log('toString'); \n    return this.i; \n }, \n valueOf: function() { \n    console.log('valueOf'); \n    return this.i; \n } \n} \n\nalert(test);// 10 toString \nalert(+test); // 10 valueOf \nalert(''+test); // 10 valueOf \nalert(String(test)); // 10 toString \nalert(Number(test)); // 10 valueOf \nalert(test == '10'); // true valueOf \nalert(test === '10'); // false\n\n```\n结论\n    1. 在进行强转字符串类型时将优先调用toString方法，强转为数字时优先调用valueOf。\n    2. 在有运算操作符的情况下，valueOf的优先级高于toString。 \n    3. 这两个方法一般是交由js去隐式调用，以满足不同的运算情况。 \n    4. 在数值运算里，会优先调用valueOf()，如 a + b; \n    5. 在字符串运算里，会优先调用toString(),如alert(c).\n\n\n### <label style=\"color:#1E90FF\">Symbol.toPrimitive</label>\n\nES6 的详细介绍：\n>对象的Symbol.toPrimitive属性，指向一个方法。该对象被转为原始类型的值时，会调用这个方法，返回该对象对应的原始类型值。\n\n>Symbol.toPrimitive被调用时，会接受一个字符串参数，表示当前运算的模式，一共有三种模式。\n\n>    1. Number：该场合需要转成数值\n>    2. String：该场合需要转成字符串\n>    3. Default：该场合可以转成数值，也可以转成字符串\n```javascript\nlet obj = {\n  [Symbol.toPrimitive](hint) {\n    switch (hint) {\n      case 'number':\n        return 123;\n      case 'string':\n        return 'str';\n      case 'default':\n        return 'default';\n      default:\n        throw new Error();\n     }\n   }\n};\n\n2 * obj // 246\n3 + obj // '3default'\nobj == 'default' // true\nString(obj) // 'str'\n```\n可以通过一个例子看下三者的优先级\n```javascript\nlet ab = {\n    valueOf() {\n        return 0;\n    },\n    toString() {\n        return '1';\n    },\n    [Symbol.toPrimitive]() {\n        return 2;\n    }\n}\nconsole.log(1+ab);  //3\nconsole.log('1'+ab); //12\n```\n结论：在转换基本类型的时候，Symbol.toPrimitive 的优先级最高。\n### <label style=\"color:#1E90FF\">类型转换及原则</label>\n\n\n##### <label style=\"color:#B0C4DE\">双等号 == 的比较机制</label>\n\n__在判断的过程中会进行隐式的类型转换__\n\n    1.是否有NaN\n    首先判断双等号两边是否有NaN，如果有的话，则一律返回false。\n\n    2.是否有boolean值\n    如果有的话则将true转化为1，false转化为0。\n\n    3.null和undefined\n    遇到null或者undefined，则不会进行类型转换，它们相互的比较都返回true。\n\n    4.有一边是字符串,分四种情况：\n\n        1） 同样是字符串，则直接进行字符串值的比较\n\n        2） 是数字，则需要将字符串转化为数字，然后进行比较\n\n        3） 有布尔类型，则要将布尔类型转化为0或则1，然后进行比较\n\n        4） 对象或者数组类型，则需要调用toString()或者valueOf()方法转化成简单类型，然后进行比较\n\n对象转化为简单类型时会优先调用valueOf方法，如果可以与简单值进行比较则会直接比较，此时不再调用toString方法。\n如果调用valueOf方法后无法与简单值进行比较，则会再调用toString方法，最终得到比对的结果。\n但是需要注意的一点是Date对象不满足上述的规则，Date对象的toString和valueOf方法都是重新定义过的。默认会调用toString方法。\n\n### <label style=\"color:#1E90FF\">灵活运用：如何实现 (a == 1 && a == 2 && a == 3) 的值为true</label>\n分析：== 操作符在左右数据类型不一致时，会先进行隐式转换。a == 1 && a == 2 && a == 3 的值意味着其不可能是基本数据类型。因此 a 是复杂数据类型，JS 中复杂数据类型只有 object，根据上边讲到的object转换类型的方法，得出答案。\n\nSymbol.toPrimitive实现（其他两种亦可）： \n```javascript\nlet a = {\n    [Symbol.toPrimitive]: (function(hint) {\n            let i = 1;\n            //闭包的特性之一：i 不会被回收\n            return function() {\n                return i++;\n            }\n    })()\n}\nconsole.log(a == 1 && a == 2 && a == 3); //true\n```\n还有一种更简单的实现，上边讲到数组的toString 接口默认调用数组的 join 方法，所以可以重写数组的 join 方法（奇淫巧技）：\n\n```javascript\nlet a = [1, 2, 3];\na.join = a.shift;\nconsole.log(a == 1 && a == 2 && a == 3); //true\n```\n\n当然该问题还有很多其他的实现方式，后续讲到其他基础知识时再列举。","slug":"FE /JS基础（二） toString、valueOf、Symbol.toPrimitive ","published":1,"updated":"2019-07-18T09:17:52.438Z","_id":"cjxyaefhc0009d9v9jpse2v4w","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a><label style=\"color:#1E90FF\">概述</label></h3><p><strong>javascript 中几乎所有类型都具有toString和valueOf属性，而且他们都有各自的toString或valueOf方法的实现，特殊情况下边讲到。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.hasOwnProperty(<span class=\"string\">'valueOf'</span>);      <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.hasOwnProperty(<span class=\"string\">'valueOf'</span>);   <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">RegExp</span>.prototype.hasOwnProperty(<span class=\"string\">'valueOf'</span>);     <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n<p>只有<label style=\"color:red\">Array,Function,RegExp</label>的原型上没有valueOf属性,他们能有该方法是因为继承了Object，所以这三个对象调用的是Object原型上的valueOf。</p>\n<label style=\"color:red;\"><br>特殊情况:null和undefined不能转换为字符串,null和undefined调用toString()方法会报错。<br>转字符串的另一种方法：String(),他可以将null和undefined转换为字符串。<br></label>\n\n<h3 id=\"valueOf-介绍\"><a href=\"#valueOf-介绍\" class=\"headerlink\" title=\"valueOf 介绍\"></a><label style=\"color:#1E90FF\">valueOf 介绍</label></h3><p><strong>valueOf() 返回对象的原始值，如果对象没有原始值，valueOf() 就会返回对象自身。</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">对象</th>\n<th style=\"text-align:left\">返回值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Array</td>\n<td style=\"text-align:left\">返回数组对象本身</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Boolean</td>\n<td style=\"text-align:left\">布尔值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Date</td>\n<td style=\"text-align:left\">返回时间的毫秒数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Function</td>\n<td style=\"text-align:left\">函数本身</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Number</td>\n<td style=\"text-align:left\">数字的值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Object</td>\n<td style=\"text-align:left\">对象本身</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">String</td>\n<td style=\"text-align:left\">字符串的值</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"toString-介绍\"><a href=\"#toString-介绍\" class=\"headerlink\" title=\"toString 介绍\"></a><label style=\"color:#1E90FF\">toString 介绍</label></h3><p><strong>toString的作用是将值转换为字符串</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">对象</th>\n<th style=\"text-align:left\">返回值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Array</td>\n<td style=\"text-align:left\">将数组元素转换为字符串，用逗号拼接并返回(a=[1,2]=&gt; “1,2”)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Boolean</td>\n<td style=\"text-align:left\">返回’true’ ‘false’</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Date</td>\n<td style=\"text-align:left\">返回日期的字符串格式 “Wed Jul 10 2019 18:21:07 GMT+0800 (中国标准时间)”</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Function</td>\n<td style=\"text-align:left\">函数本身的文本 “function a(){console.log(‘function’)}”</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Number</td>\n<td style=\"text-align:left\">返回文本表示，<label style=\"color:red\">可接收一个参数表示输出的进制数，默认为十进制</label></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Object</td>\n<td style=\"text-align:left\">返回 <label style=\"color:red\">“[object 类型名]”</label></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">String</td>\n<td style=\"text-align:left\">字符串的值</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"valueOf-toString-使用场景\"><a href=\"#valueOf-toString-使用场景\" class=\"headerlink\" title=\"valueOf toString 使用场景\"></a><label style=\"color:#1E90FF\">valueOf toString 使用场景</label></h3><p>定义一个复杂对象，具体看下他们是如何执行的<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> test = &#123; </span><br><span class=\"line\"> i: <span class=\"number\">10</span>, </span><br><span class=\"line\"> toString: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'toString'</span>); </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.i; </span><br><span class=\"line\"> &#125;, </span><br><span class=\"line\"> valueOf: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'valueOf'</span>); </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.i; </span><br><span class=\"line\"> &#125; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">alert(test);<span class=\"comment\">// 10 toString </span></span><br><span class=\"line\">alert(+test); <span class=\"comment\">// 10 valueOf </span></span><br><span class=\"line\">alert(<span class=\"string\">''</span>+test); <span class=\"comment\">// 10 valueOf </span></span><br><span class=\"line\">alert(<span class=\"built_in\">String</span>(test)); <span class=\"comment\">// 10 toString </span></span><br><span class=\"line\">alert(<span class=\"built_in\">Number</span>(test)); <span class=\"comment\">// 10 valueOf </span></span><br><span class=\"line\">alert(test == <span class=\"string\">'10'</span>); <span class=\"comment\">// true valueOf </span></span><br><span class=\"line\">alert(test === <span class=\"string\">'10'</span>); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure></p>\n<p>结论</p>\n<pre><code>1. 在进行强转字符串类型时将优先调用toString方法，强转为数字时优先调用valueOf。\n2. 在有运算操作符的情况下，valueOf的优先级高于toString。 \n3. 这两个方法一般是交由js去隐式调用，以满足不同的运算情况。 \n4. 在数值运算里，会优先调用valueOf()，如 a + b; \n5. 在字符串运算里，会优先调用toString(),如alert(c).\n</code></pre><h3 id=\"Symbol-toPrimitive\"><a href=\"#Symbol-toPrimitive\" class=\"headerlink\" title=\"Symbol.toPrimitive\"></a><label style=\"color:#1E90FF\">Symbol.toPrimitive</label></h3><p>ES6 的详细介绍：</p>\n<blockquote>\n<p>对象的Symbol.toPrimitive属性，指向一个方法。该对象被转为原始类型的值时，会调用这个方法，返回该对象对应的原始类型值。</p>\n</blockquote>\n<blockquote>\n<p>Symbol.toPrimitive被调用时，会接受一个字符串参数，表示当前运算的模式，一共有三种模式。</p>\n</blockquote>\n<blockquote>\n<ol>\n<li>Number：该场合需要转成数值</li>\n<li>String：该场合需要转成字符串</li>\n<li>Default：该场合可以转成数值，也可以转成字符串<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  [<span class=\"built_in\">Symbol</span>.toPrimitive](hint) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (hint) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'number'</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">123</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'string'</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'str'</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'default'</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'default'</span>;</span><br><span class=\"line\">      <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>();</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span> * obj <span class=\"comment\">// 246</span></span><br><span class=\"line\"><span class=\"number\">3</span> + obj <span class=\"comment\">// '3default'</span></span><br><span class=\"line\">obj == <span class=\"string\">'default'</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">String</span>(obj) <span class=\"comment\">// 'str'</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>可以通过一个例子看下三者的优先级<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ab = &#123;</span><br><span class=\"line\">    valueOf() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    toString() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'1'</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    [<span class=\"built_in\">Symbol</span>.toPrimitive]() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>+ab);  <span class=\"comment\">//3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'1'</span>+ab); <span class=\"comment\">//12</span></span><br></pre></td></tr></table></figure></p>\n<p>结论：在转换基本类型的时候，Symbol.toPrimitive 的优先级最高。</p>\n<h3 id=\"类型转换及原则\"><a href=\"#类型转换及原则\" class=\"headerlink\" title=\"类型转换及原则\"></a><label style=\"color:#1E90FF\">类型转换及原则</label></h3><h5 id=\"双等号-的比较机制\"><a href=\"#双等号-的比较机制\" class=\"headerlink\" title=\"双等号 == 的比较机制\"></a><label style=\"color:#B0C4DE\">双等号 == 的比较机制</label></h5><p><strong>在判断的过程中会进行隐式的类型转换</strong></p>\n<pre><code>1.是否有NaN\n首先判断双等号两边是否有NaN，如果有的话，则一律返回false。\n\n2.是否有boolean值\n如果有的话则将true转化为1，false转化为0。\n\n3.null和undefined\n遇到null或者undefined，则不会进行类型转换，它们相互的比较都返回true。\n\n4.有一边是字符串,分四种情况：\n\n    1） 同样是字符串，则直接进行字符串值的比较\n\n    2） 是数字，则需要将字符串转化为数字，然后进行比较\n\n    3） 有布尔类型，则要将布尔类型转化为0或则1，然后进行比较\n\n    4） 对象或者数组类型，则需要调用toString()或者valueOf()方法转化成简单类型，然后进行比较\n</code></pre><p>对象转化为简单类型时会优先调用valueOf方法，如果可以与简单值进行比较则会直接比较，此时不再调用toString方法。<br>如果调用valueOf方法后无法与简单值进行比较，则会再调用toString方法，最终得到比对的结果。<br>但是需要注意的一点是Date对象不满足上述的规则，Date对象的toString和valueOf方法都是重新定义过的。默认会调用toString方法。</p>\n<h3 id=\"灵活运用：如何实现-a-1-amp-amp-a-2-amp-amp-a-3-的值为true\"><a href=\"#灵活运用：如何实现-a-1-amp-amp-a-2-amp-amp-a-3-的值为true\" class=\"headerlink\" title=\"灵活运用：如何实现 (a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3) 的值为true\"></a><label style=\"color:#1E90FF\">灵活运用：如何实现 (a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3) 的值为true</label></h3><p>分析：== 操作符在左右数据类型不一致时，会先进行隐式转换。a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3 的值意味着其不可能是基本数据类型。因此 a 是复杂数据类型，JS 中复杂数据类型只有 object，根据上边讲到的object转换类型的方法，得出答案。</p>\n<p>Symbol.toPrimitive实现（其他两种亦可）：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = &#123;</span><br><span class=\"line\">    [<span class=\"built_in\">Symbol</span>.toPrimitive]: (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">hint</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"comment\">//闭包的特性之一：i 不会被回收</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> i++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;)()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a == <span class=\"number\">1</span> &amp;&amp; a == <span class=\"number\">2</span> &amp;&amp; a == <span class=\"number\">3</span>); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure></p>\n<p>还有一种更简单的实现，上边讲到数组的toString 接口默认调用数组的 join 方法，所以可以重写数组的 join 方法（奇淫巧技）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">a.join = a.shift;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a == <span class=\"number\">1</span> &amp;&amp; a == <span class=\"number\">2</span> &amp;&amp; a == <span class=\"number\">3</span>); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>当然该问题还有很多其他的实现方式，后续讲到其他基础知识时再列举。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a><label style=\"color:#1E90FF\">概述</label></h3><p><strong>javascript 中几乎所有类型都具有toString和valueOf属性，而且他们都有各自的toString或valueOf方法的实现，特殊情况下边讲到。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.hasOwnProperty(<span class=\"string\">'valueOf'</span>);      <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.hasOwnProperty(<span class=\"string\">'valueOf'</span>);   <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">RegExp</span>.prototype.hasOwnProperty(<span class=\"string\">'valueOf'</span>);     <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n<p>只有<label style=\"color:red\">Array,Function,RegExp</label>的原型上没有valueOf属性,他们能有该方法是因为继承了Object，所以这三个对象调用的是Object原型上的valueOf。</p>\n<label style=\"color:red;\"><br>特殊情况:null和undefined不能转换为字符串,null和undefined调用toString()方法会报错。<br>转字符串的另一种方法：String(),他可以将null和undefined转换为字符串。<br></label>\n\n<h3 id=\"valueOf-介绍\"><a href=\"#valueOf-介绍\" class=\"headerlink\" title=\"valueOf 介绍\"></a><label style=\"color:#1E90FF\">valueOf 介绍</label></h3><p><strong>valueOf() 返回对象的原始值，如果对象没有原始值，valueOf() 就会返回对象自身。</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">对象</th>\n<th style=\"text-align:left\">返回值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Array</td>\n<td style=\"text-align:left\">返回数组对象本身</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Boolean</td>\n<td style=\"text-align:left\">布尔值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Date</td>\n<td style=\"text-align:left\">返回时间的毫秒数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Function</td>\n<td style=\"text-align:left\">函数本身</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Number</td>\n<td style=\"text-align:left\">数字的值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Object</td>\n<td style=\"text-align:left\">对象本身</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">String</td>\n<td style=\"text-align:left\">字符串的值</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"toString-介绍\"><a href=\"#toString-介绍\" class=\"headerlink\" title=\"toString 介绍\"></a><label style=\"color:#1E90FF\">toString 介绍</label></h3><p><strong>toString的作用是将值转换为字符串</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">对象</th>\n<th style=\"text-align:left\">返回值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Array</td>\n<td style=\"text-align:left\">将数组元素转换为字符串，用逗号拼接并返回(a=[1,2]=&gt; “1,2”)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Boolean</td>\n<td style=\"text-align:left\">返回’true’ ‘false’</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Date</td>\n<td style=\"text-align:left\">返回日期的字符串格式 “Wed Jul 10 2019 18:21:07 GMT+0800 (中国标准时间)”</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Function</td>\n<td style=\"text-align:left\">函数本身的文本 “function a(){console.log(‘function’)}”</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Number</td>\n<td style=\"text-align:left\">返回文本表示，<label style=\"color:red\">可接收一个参数表示输出的进制数，默认为十进制</label></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Object</td>\n<td style=\"text-align:left\">返回 <label style=\"color:red\">“[object 类型名]”</label></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">String</td>\n<td style=\"text-align:left\">字符串的值</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"valueOf-toString-使用场景\"><a href=\"#valueOf-toString-使用场景\" class=\"headerlink\" title=\"valueOf toString 使用场景\"></a><label style=\"color:#1E90FF\">valueOf toString 使用场景</label></h3><p>定义一个复杂对象，具体看下他们是如何执行的<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> test = &#123; </span><br><span class=\"line\"> i: <span class=\"number\">10</span>, </span><br><span class=\"line\"> toString: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'toString'</span>); </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.i; </span><br><span class=\"line\"> &#125;, </span><br><span class=\"line\"> valueOf: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'valueOf'</span>); </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.i; </span><br><span class=\"line\"> &#125; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">alert(test);<span class=\"comment\">// 10 toString </span></span><br><span class=\"line\">alert(+test); <span class=\"comment\">// 10 valueOf </span></span><br><span class=\"line\">alert(<span class=\"string\">''</span>+test); <span class=\"comment\">// 10 valueOf </span></span><br><span class=\"line\">alert(<span class=\"built_in\">String</span>(test)); <span class=\"comment\">// 10 toString </span></span><br><span class=\"line\">alert(<span class=\"built_in\">Number</span>(test)); <span class=\"comment\">// 10 valueOf </span></span><br><span class=\"line\">alert(test == <span class=\"string\">'10'</span>); <span class=\"comment\">// true valueOf </span></span><br><span class=\"line\">alert(test === <span class=\"string\">'10'</span>); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure></p>\n<p>结论</p>\n<pre><code>1. 在进行强转字符串类型时将优先调用toString方法，强转为数字时优先调用valueOf。\n2. 在有运算操作符的情况下，valueOf的优先级高于toString。 \n3. 这两个方法一般是交由js去隐式调用，以满足不同的运算情况。 \n4. 在数值运算里，会优先调用valueOf()，如 a + b; \n5. 在字符串运算里，会优先调用toString(),如alert(c).\n</code></pre><h3 id=\"Symbol-toPrimitive\"><a href=\"#Symbol-toPrimitive\" class=\"headerlink\" title=\"Symbol.toPrimitive\"></a><label style=\"color:#1E90FF\">Symbol.toPrimitive</label></h3><p>ES6 的详细介绍：</p>\n<blockquote>\n<p>对象的Symbol.toPrimitive属性，指向一个方法。该对象被转为原始类型的值时，会调用这个方法，返回该对象对应的原始类型值。</p>\n</blockquote>\n<blockquote>\n<p>Symbol.toPrimitive被调用时，会接受一个字符串参数，表示当前运算的模式，一共有三种模式。</p>\n</blockquote>\n<blockquote>\n<ol>\n<li>Number：该场合需要转成数值</li>\n<li>String：该场合需要转成字符串</li>\n<li>Default：该场合可以转成数值，也可以转成字符串<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  [<span class=\"built_in\">Symbol</span>.toPrimitive](hint) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (hint) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'number'</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">123</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'string'</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'str'</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'default'</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'default'</span>;</span><br><span class=\"line\">      <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>();</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span> * obj <span class=\"comment\">// 246</span></span><br><span class=\"line\"><span class=\"number\">3</span> + obj <span class=\"comment\">// '3default'</span></span><br><span class=\"line\">obj == <span class=\"string\">'default'</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">String</span>(obj) <span class=\"comment\">// 'str'</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>可以通过一个例子看下三者的优先级<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ab = &#123;</span><br><span class=\"line\">    valueOf() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    toString() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'1'</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    [<span class=\"built_in\">Symbol</span>.toPrimitive]() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>+ab);  <span class=\"comment\">//3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'1'</span>+ab); <span class=\"comment\">//12</span></span><br></pre></td></tr></table></figure></p>\n<p>结论：在转换基本类型的时候，Symbol.toPrimitive 的优先级最高。</p>\n<h3 id=\"类型转换及原则\"><a href=\"#类型转换及原则\" class=\"headerlink\" title=\"类型转换及原则\"></a><label style=\"color:#1E90FF\">类型转换及原则</label></h3><h5 id=\"双等号-的比较机制\"><a href=\"#双等号-的比较机制\" class=\"headerlink\" title=\"双等号 == 的比较机制\"></a><label style=\"color:#B0C4DE\">双等号 == 的比较机制</label></h5><p><strong>在判断的过程中会进行隐式的类型转换</strong></p>\n<pre><code>1.是否有NaN\n首先判断双等号两边是否有NaN，如果有的话，则一律返回false。\n\n2.是否有boolean值\n如果有的话则将true转化为1，false转化为0。\n\n3.null和undefined\n遇到null或者undefined，则不会进行类型转换，它们相互的比较都返回true。\n\n4.有一边是字符串,分四种情况：\n\n    1） 同样是字符串，则直接进行字符串值的比较\n\n    2） 是数字，则需要将字符串转化为数字，然后进行比较\n\n    3） 有布尔类型，则要将布尔类型转化为0或则1，然后进行比较\n\n    4） 对象或者数组类型，则需要调用toString()或者valueOf()方法转化成简单类型，然后进行比较\n</code></pre><p>对象转化为简单类型时会优先调用valueOf方法，如果可以与简单值进行比较则会直接比较，此时不再调用toString方法。<br>如果调用valueOf方法后无法与简单值进行比较，则会再调用toString方法，最终得到比对的结果。<br>但是需要注意的一点是Date对象不满足上述的规则，Date对象的toString和valueOf方法都是重新定义过的。默认会调用toString方法。</p>\n<h3 id=\"灵活运用：如何实现-a-1-amp-amp-a-2-amp-amp-a-3-的值为true\"><a href=\"#灵活运用：如何实现-a-1-amp-amp-a-2-amp-amp-a-3-的值为true\" class=\"headerlink\" title=\"灵活运用：如何实现 (a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3) 的值为true\"></a><label style=\"color:#1E90FF\">灵活运用：如何实现 (a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3) 的值为true</label></h3><p>分析：== 操作符在左右数据类型不一致时，会先进行隐式转换。a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3 的值意味着其不可能是基本数据类型。因此 a 是复杂数据类型，JS 中复杂数据类型只有 object，根据上边讲到的object转换类型的方法，得出答案。</p>\n<p>Symbol.toPrimitive实现（其他两种亦可）：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = &#123;</span><br><span class=\"line\">    [<span class=\"built_in\">Symbol</span>.toPrimitive]: (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">hint</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"comment\">//闭包的特性之一：i 不会被回收</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> i++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;)()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a == <span class=\"number\">1</span> &amp;&amp; a == <span class=\"number\">2</span> &amp;&amp; a == <span class=\"number\">3</span>); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure></p>\n<p>还有一种更简单的实现，上边讲到数组的toString 接口默认调用数组的 join 方法，所以可以重写数组的 join 方法（奇淫巧技）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">a.join = a.shift;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a == <span class=\"number\">1</span> &amp;&amp; a == <span class=\"number\">2</span> &amp;&amp; a == <span class=\"number\">3</span>); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>当然该问题还有很多其他的实现方式，后续讲到其他基础知识时再列举。</p>\n"},{"title":"解决hexo无法提交备份theme主题目录","date":"2019-07-08T16:00:00.000Z","_content":"#### 问题描述：\n提交代码到github后，在新的电脑clone项目时发现之前配置的样式丢失，然后才发现主题文件是空的。\n![20190709175746.png](https://raw.githubusercontent.com/itlilei/pic/master/20190709175746.png)\n#### 解决办法：\n``` bash \ngit rm --cached themes/next #next为你的主题名\n```\n然后重新提交即可（ <label style=\"color:red;\"> 如果还不行，看下改目录下是否有.git 隐藏文件夹，删除后 重新执行清除缓存操作。</label>）\n#### 问题原因：\n因为我的项目是clone的官方项目，相当于一个子项目，这里用到了git 的子模块（git submodule）功能，子模块只是一个 HEAD 指针，指向子模块的 commit。\n相当于把一个大项目分成多个小项目，尽可能减少项目之间的关联，方便调试和修改。\n>关于子模块的详细描述，参考文档： https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97\n","source":"_posts/Tools/hexo主题theme无法提交.md","raw":"---\ntitle: 解决hexo无法提交备份theme主题目录\ntags: \n- hexo\n- git\ndate: 2019-07-09\ncategories: 工具\n---\n#### 问题描述：\n提交代码到github后，在新的电脑clone项目时发现之前配置的样式丢失，然后才发现主题文件是空的。\n![20190709175746.png](https://raw.githubusercontent.com/itlilei/pic/master/20190709175746.png)\n#### 解决办法：\n``` bash \ngit rm --cached themes/next #next为你的主题名\n```\n然后重新提交即可（ <label style=\"color:red;\"> 如果还不行，看下改目录下是否有.git 隐藏文件夹，删除后 重新执行清除缓存操作。</label>）\n#### 问题原因：\n因为我的项目是clone的官方项目，相当于一个子项目，这里用到了git 的子模块（git submodule）功能，子模块只是一个 HEAD 指针，指向子模块的 commit。\n相当于把一个大项目分成多个小项目，尽可能减少项目之间的关联，方便调试和修改。\n>关于子模块的详细描述，参考文档： https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97\n","slug":"Tools/hexo主题theme无法提交","published":1,"updated":"2019-07-09T14:38:13.035Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxyaefhi000ed9v9tldhouju","content":"<h4 id=\"问题描述：\"><a href=\"#问题描述：\" class=\"headerlink\" title=\"问题描述：\"></a>问题描述：</h4><p>提交代码到github后，在新的电脑clone项目时发现之前配置的样式丢失，然后才发现主题文件是空的。<br><img src=\"https://raw.githubusercontent.com/itlilei/pic/master/20190709175746.png\" alt=\"20190709175746.png\"></p>\n<h4 id=\"解决办法：\"><a href=\"#解决办法：\" class=\"headerlink\" title=\"解决办法：\"></a>解决办法：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm --cached themes/next <span class=\"comment\">#next为你的主题名</span></span><br></pre></td></tr></table></figure>\n<p>然后重新提交即可（ <label style=\"color:red;\"> 如果还不行，看下改目录下是否有.git 隐藏文件夹，删除后 重新执行清除缓存操作。</label>）</p>\n<h4 id=\"问题原因：\"><a href=\"#问题原因：\" class=\"headerlink\" title=\"问题原因：\"></a>问题原因：</h4><p>因为我的项目是clone的官方项目，相当于一个子项目，这里用到了git 的子模块（git submodule）功能，子模块只是一个 HEAD 指针，指向子模块的 commit。<br>相当于把一个大项目分成多个小项目，尽可能减少项目之间的关联，方便调试和修改。</p>\n<blockquote>\n<p>关于子模块的详细描述，参考文档： <a href=\"https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97\" target=\"_blank\" rel=\"noopener\">https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"问题描述：\"><a href=\"#问题描述：\" class=\"headerlink\" title=\"问题描述：\"></a>问题描述：</h4><p>提交代码到github后，在新的电脑clone项目时发现之前配置的样式丢失，然后才发现主题文件是空的。<br><img src=\"https://raw.githubusercontent.com/itlilei/pic/master/20190709175746.png\" alt=\"20190709175746.png\"></p>\n<h4 id=\"解决办法：\"><a href=\"#解决办法：\" class=\"headerlink\" title=\"解决办法：\"></a>解决办法：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm --cached themes/next <span class=\"comment\">#next为你的主题名</span></span><br></pre></td></tr></table></figure>\n<p>然后重新提交即可（ <label style=\"color:red;\"> 如果还不行，看下改目录下是否有.git 隐藏文件夹，删除后 重新执行清除缓存操作。</label>）</p>\n<h4 id=\"问题原因：\"><a href=\"#问题原因：\" class=\"headerlink\" title=\"问题原因：\"></a>问题原因：</h4><p>因为我的项目是clone的官方项目，相当于一个子项目，这里用到了git 的子模块（git submodule）功能，子模块只是一个 HEAD 指针，指向子模块的 commit。<br>相当于把一个大项目分成多个小项目，尽可能减少项目之间的关联，方便调试和修改。</p>\n<blockquote>\n<p>关于子模块的详细描述，参考文档： <a href=\"https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97\" target=\"_blank\" rel=\"noopener\">https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97</a></p>\n</blockquote>\n"},{"title":"git常用命令及问题汇总","date":"2019-07-08T16:00:00.000Z","_content":"\n整理了一些我常用的命令及遇到的问题，供参考。\n#### Git配置ssh\n配置你的用户名和邮箱：\n``` bash\n$ git config --global user.name \"name\"\n$ git config --global user.email \"email@163.com\"\n```\n生成ssh\n\n```bash\nssh-keygen -t rsa -C \"your_email@youremail.com\"\n```\n<label style=\"color:grey\">\n Creates a new ssh key using the provided email # Generating public/private rsa # key pair.\nEnter file in which to save the key (/home/you/.ssh/id_rsa):\n</label>\n\n然后按两次Enter键\n\n#### 查看生成的公钥\n\n```bash \ncat ~/.ssh/id_rsa.pub\n```\n\n然后复制key到github或者gitlab 里\n\n#### 验证是否正常：\n ```bash \n ssh -T git@github.com\n```\n\n\n#### git commit 提交添加表情\n\n提交引入表情 记录一目了然。使用方法：\n ```bash \n git commit -m':tada: 提交内容说明'\n ```\n\n![20190711153908.png](https://raw.githubusercontent.com/itlilei/pic/master/20190711153908.png)","source":"_posts/Tools/git常用命令及问题汇总.md","raw":"---\ntitle: git常用命令及问题汇总\ntags: \n  - git\ndate: 2019-07-09\ncategories: 工具\n---\n\n整理了一些我常用的命令及遇到的问题，供参考。\n#### Git配置ssh\n配置你的用户名和邮箱：\n``` bash\n$ git config --global user.name \"name\"\n$ git config --global user.email \"email@163.com\"\n```\n生成ssh\n\n```bash\nssh-keygen -t rsa -C \"your_email@youremail.com\"\n```\n<label style=\"color:grey\">\n Creates a new ssh key using the provided email # Generating public/private rsa # key pair.\nEnter file in which to save the key (/home/you/.ssh/id_rsa):\n</label>\n\n然后按两次Enter键\n\n#### 查看生成的公钥\n\n```bash \ncat ~/.ssh/id_rsa.pub\n```\n\n然后复制key到github或者gitlab 里\n\n#### 验证是否正常：\n ```bash \n ssh -T git@github.com\n```\n\n\n#### git commit 提交添加表情\n\n提交引入表情 记录一目了然。使用方法：\n ```bash \n git commit -m':tada: 提交内容说明'\n ```\n\n![20190711153908.png](https://raw.githubusercontent.com/itlilei/pic/master/20190711153908.png)","slug":"Tools/git常用命令及问题汇总","published":1,"updated":"2019-07-11T07:42:52.640Z","_id":"cjxyaefhk000gd9v9y1vz4ev8","comments":1,"layout":"post","photos":[],"link":"","content":"<p>整理了一些我常用的命令及遇到的问题，供参考。</p>\n<h4 id=\"Git配置ssh\"><a href=\"#Git配置ssh\" class=\"headerlink\" title=\"Git配置ssh\"></a>Git配置ssh</h4><p>配置你的用户名和邮箱：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name <span class=\"string\">\"name\"</span></span><br><span class=\"line\">$ git config --global user.email <span class=\"string\">\"email@163.com\"</span></span><br></pre></td></tr></table></figure></p>\n<p>生成ssh</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">\"your_email@youremail.com\"</span></span><br></pre></td></tr></table></figure>\n<label style=\"color:grey\"><br> Creates a new ssh key using the provided email # Generating public/private rsa # key pair.<br>Enter file in which to save the key (/home/you/.ssh/id_rsa):<br></label>\n\n<p>然后按两次Enter键</p>\n<h4 id=\"查看生成的公钥\"><a href=\"#查看生成的公钥\" class=\"headerlink\" title=\"查看生成的公钥\"></a>查看生成的公钥</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>\n<p>然后复制key到github或者gitlab 里</p>\n<h4 id=\"验证是否正常：\"><a href=\"#验证是否正常：\" class=\"headerlink\" title=\"验证是否正常：\"></a>验证是否正常：</h4> <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n<h4 id=\"git-commit-提交添加表情\"><a href=\"#git-commit-提交添加表情\" class=\"headerlink\" title=\"git commit 提交添加表情\"></a>git commit 提交添加表情</h4><p>提交引入表情 记录一目了然。使用方法：<br> <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m<span class=\"string\">':tada: 提交内容说明'</span></span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://raw.githubusercontent.com/itlilei/pic/master/20190711153908.png\" alt=\"20190711153908.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>整理了一些我常用的命令及遇到的问题，供参考。</p>\n<h4 id=\"Git配置ssh\"><a href=\"#Git配置ssh\" class=\"headerlink\" title=\"Git配置ssh\"></a>Git配置ssh</h4><p>配置你的用户名和邮箱：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name <span class=\"string\">\"name\"</span></span><br><span class=\"line\">$ git config --global user.email <span class=\"string\">\"email@163.com\"</span></span><br></pre></td></tr></table></figure></p>\n<p>生成ssh</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">\"your_email@youremail.com\"</span></span><br></pre></td></tr></table></figure>\n<label style=\"color:grey\"><br> Creates a new ssh key using the provided email # Generating public/private rsa # key pair.<br>Enter file in which to save the key (/home/you/.ssh/id_rsa):<br></label>\n\n<p>然后按两次Enter键</p>\n<h4 id=\"查看生成的公钥\"><a href=\"#查看生成的公钥\" class=\"headerlink\" title=\"查看生成的公钥\"></a>查看生成的公钥</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>\n<p>然后复制key到github或者gitlab 里</p>\n<h4 id=\"验证是否正常：\"><a href=\"#验证是否正常：\" class=\"headerlink\" title=\"验证是否正常：\"></a>验证是否正常：</h4> <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n<h4 id=\"git-commit-提交添加表情\"><a href=\"#git-commit-提交添加表情\" class=\"headerlink\" title=\"git commit 提交添加表情\"></a>git commit 提交添加表情</h4><p>提交引入表情 记录一目了然。使用方法：<br> <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m<span class=\"string\">':tada: 提交内容说明'</span></span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://raw.githubusercontent.com/itlilei/pic/master/20190711153908.png\" alt=\"20190711153908.png\"></p>\n"},{"title":"VS Code 插件-图片自动上传工具  picgo","date":"2019-07-02T16:00:00.000Z","_content":"\n#### 搜索 安装  picgo后 ，点击小齿轮配置github上传如下：\n\n![1.jpg](https://raw.githubusercontent.com/itlilei/pic/master/1.jpg?token=AEM2KM4SNFMKIYHOV7E4PDC5DRNC6)\n\n#### 也可以再settings.json中配置：\n\n![2.jpg](https://raw.githubusercontent.com/itlilei/pic/master/2.jpg?token=AEM2KMYYCSKFCHUUJYV3VVC5DRNEA)\n\n``` bash\n\"picgo.picBed.github.repo\": \"itlilei/name\", // 仓库名，格式是username/reponame\n\"picgo.picBed.github.token\":\"***\", \n\"picgo.picBed.github.branch\": \"master\",// 分支名，默认是master\n\"picgo.picBed.current\": \"github\"\n```\n\n> 详细参数配置介绍可参考官方文档：https://picgo.github.io/PicGo-Doc/zh/guide/config.html#github%E5%9B%BE%E5%BA%8A\n\n#### 快捷键参考：\n\n![4.jpg](https://raw.githubusercontent.com/itlilei/pic/master/4.jpg?token=AEM2KM6T5EX2RK4P6L4KL2C5DRLUK)\n\n* *配置过程中遇到一个坑，github生成的token复制到onenote中，粘贴时默认首字母转换成大写了，导致一直上传失败，怀疑人生 /(ㄒoㄒ)/~~*\n\n![3.jpg](https://raw.githubusercontent.com/itlilei/pic/master/3.jpg?token=AEM2KM2RN4Z6JDKJBDODWBC5DRM6O)\n\n\n总结：配置完成后，写教程和文章，随时截图，直接粘贴图片链接，效率杠杠的。","source":"_posts/Tools/图片自动上传工具picgo.md","raw":"---\ntitle: VS Code 插件-图片自动上传工具  picgo\ntags: VS Code\ndate: 2019-07-03\ncategories: 工具\n---\n\n#### 搜索 安装  picgo后 ，点击小齿轮配置github上传如下：\n\n![1.jpg](https://raw.githubusercontent.com/itlilei/pic/master/1.jpg?token=AEM2KM4SNFMKIYHOV7E4PDC5DRNC6)\n\n#### 也可以再settings.json中配置：\n\n![2.jpg](https://raw.githubusercontent.com/itlilei/pic/master/2.jpg?token=AEM2KMYYCSKFCHUUJYV3VVC5DRNEA)\n\n``` bash\n\"picgo.picBed.github.repo\": \"itlilei/name\", // 仓库名，格式是username/reponame\n\"picgo.picBed.github.token\":\"***\", \n\"picgo.picBed.github.branch\": \"master\",// 分支名，默认是master\n\"picgo.picBed.current\": \"github\"\n```\n\n> 详细参数配置介绍可参考官方文档：https://picgo.github.io/PicGo-Doc/zh/guide/config.html#github%E5%9B%BE%E5%BA%8A\n\n#### 快捷键参考：\n\n![4.jpg](https://raw.githubusercontent.com/itlilei/pic/master/4.jpg?token=AEM2KM6T5EX2RK4P6L4KL2C5DRLUK)\n\n* *配置过程中遇到一个坑，github生成的token复制到onenote中，粘贴时默认首字母转换成大写了，导致一直上传失败，怀疑人生 /(ㄒoㄒ)/~~*\n\n![3.jpg](https://raw.githubusercontent.com/itlilei/pic/master/3.jpg?token=AEM2KM2RN4Z6JDKJBDODWBC5DRM6O)\n\n\n总结：配置完成后，写教程和文章，随时截图，直接粘贴图片链接，效率杠杠的。","slug":"Tools/图片自动上传工具picgo","published":1,"updated":"2019-07-24T13:35:08.993Z","_id":"cjxyaefj80013d9v9ez687j3f","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"搜索-安装-picgo后-，点击小齿轮配置github上传如下：\"><a href=\"#搜索-安装-picgo后-，点击小齿轮配置github上传如下：\" class=\"headerlink\" title=\"搜索 安装  picgo后 ，点击小齿轮配置github上传如下：\"></a>搜索 安装  picgo后 ，点击小齿轮配置github上传如下：</h4><p><img src=\"https://raw.githubusercontent.com/itlilei/pic/master/1.jpg?token=AEM2KM4SNFMKIYHOV7E4PDC5DRNC6\" alt=\"1.jpg\"></p>\n<h4 id=\"也可以再settings-json中配置：\"><a href=\"#也可以再settings-json中配置：\" class=\"headerlink\" title=\"也可以再settings.json中配置：\"></a>也可以再settings.json中配置：</h4><p><img src=\"https://raw.githubusercontent.com/itlilei/pic/master/2.jpg?token=AEM2KMYYCSKFCHUUJYV3VVC5DRNEA\" alt=\"2.jpg\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"picgo.picBed.github.repo\"</span>: <span class=\"string\">\"itlilei/name\"</span>, // 仓库名，格式是username/reponame</span><br><span class=\"line\"><span class=\"string\">\"picgo.picBed.github.token\"</span>:<span class=\"string\">\"***\"</span>, </span><br><span class=\"line\"><span class=\"string\">\"picgo.picBed.github.branch\"</span>: <span class=\"string\">\"master\"</span>,// 分支名，默认是master</span><br><span class=\"line\"><span class=\"string\">\"picgo.picBed.current\"</span>: <span class=\"string\">\"github\"</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>详细参数配置介绍可参考官方文档：<a href=\"https://picgo.github.io/PicGo-Doc/zh/guide/config.html#github%E5%9B%BE%E5%BA%8A\" target=\"_blank\" rel=\"noopener\">https://picgo.github.io/PicGo-Doc/zh/guide/config.html#github%E5%9B%BE%E5%BA%8A</a></p>\n</blockquote>\n<h4 id=\"快捷键参考：\"><a href=\"#快捷键参考：\" class=\"headerlink\" title=\"快捷键参考：\"></a>快捷键参考：</h4><p><img src=\"https://raw.githubusercontent.com/itlilei/pic/master/4.jpg?token=AEM2KM6T5EX2RK4P6L4KL2C5DRLUK\" alt=\"4.jpg\"></p>\n<ul>\n<li><em>配置过程中遇到一个坑，github生成的token复制到onenote中，粘贴时默认首字母转换成大写了，导致一直上传失败，怀疑人生 /(ㄒoㄒ)/~~</em></li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/itlilei/pic/master/3.jpg?token=AEM2KM2RN4Z6JDKJBDODWBC5DRM6O\" alt=\"3.jpg\"></p>\n<p>总结：配置完成后，写教程和文章，随时截图，直接粘贴图片链接，效率杠杠的。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"搜索-安装-picgo后-，点击小齿轮配置github上传如下：\"><a href=\"#搜索-安装-picgo后-，点击小齿轮配置github上传如下：\" class=\"headerlink\" title=\"搜索 安装  picgo后 ，点击小齿轮配置github上传如下：\"></a>搜索 安装  picgo后 ，点击小齿轮配置github上传如下：</h4><p><img src=\"https://raw.githubusercontent.com/itlilei/pic/master/1.jpg?token=AEM2KM4SNFMKIYHOV7E4PDC5DRNC6\" alt=\"1.jpg\"></p>\n<h4 id=\"也可以再settings-json中配置：\"><a href=\"#也可以再settings-json中配置：\" class=\"headerlink\" title=\"也可以再settings.json中配置：\"></a>也可以再settings.json中配置：</h4><p><img src=\"https://raw.githubusercontent.com/itlilei/pic/master/2.jpg?token=AEM2KMYYCSKFCHUUJYV3VVC5DRNEA\" alt=\"2.jpg\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"picgo.picBed.github.repo\"</span>: <span class=\"string\">\"itlilei/name\"</span>, // 仓库名，格式是username/reponame</span><br><span class=\"line\"><span class=\"string\">\"picgo.picBed.github.token\"</span>:<span class=\"string\">\"***\"</span>, </span><br><span class=\"line\"><span class=\"string\">\"picgo.picBed.github.branch\"</span>: <span class=\"string\">\"master\"</span>,// 分支名，默认是master</span><br><span class=\"line\"><span class=\"string\">\"picgo.picBed.current\"</span>: <span class=\"string\">\"github\"</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>详细参数配置介绍可参考官方文档：<a href=\"https://picgo.github.io/PicGo-Doc/zh/guide/config.html#github%E5%9B%BE%E5%BA%8A\" target=\"_blank\" rel=\"noopener\">https://picgo.github.io/PicGo-Doc/zh/guide/config.html#github%E5%9B%BE%E5%BA%8A</a></p>\n</blockquote>\n<h4 id=\"快捷键参考：\"><a href=\"#快捷键参考：\" class=\"headerlink\" title=\"快捷键参考：\"></a>快捷键参考：</h4><p><img src=\"https://raw.githubusercontent.com/itlilei/pic/master/4.jpg?token=AEM2KM6T5EX2RK4P6L4KL2C5DRLUK\" alt=\"4.jpg\"></p>\n<ul>\n<li><em>配置过程中遇到一个坑，github生成的token复制到onenote中，粘贴时默认首字母转换成大写了，导致一直上传失败，怀疑人生 /(ㄒoㄒ)/~~</em></li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/itlilei/pic/master/3.jpg?token=AEM2KM2RN4Z6JDKJBDODWBC5DRM6O\" alt=\"3.jpg\"></p>\n<p>总结：配置完成后，写教程和文章，随时截图，直接粘贴图片链接，效率杠杠的。</p>\n"},{"title":"JS基础（三）JS运行机制 Event Loop","_content":"\n### JS运行机制\n\n#### 任务队列\nJS最大的特点就是单线程，所有任务需要排队，前一个任务结束，才会执行后一个任务。所有任务可以分成两种，一种是同步任务（synchronous），另一种是异步任务（asynchronous）。同步任务指的是，在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；异步任务指的是，不进入主线程、而进入\"任务队列\"（task queue）的任务，只有\"任务队列\"通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行，运行机制如下：\n\n    （1）所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）。\n\n    （2）主线程之外，还存在一个\"任务队列\"（task queue）。只要异步任务有了运行结果，就在\"任务队列\"之中放置一个事件。\n\n    （3）一旦\"执行栈\"中的所有同步任务执行完毕，系统就会读取\"任务队列\"，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。\n\n    （4）主线程不断重复上面的第三步。\n\n<label style=\"color:#CCCCCC\">HTML5提出Web Worker标准，允许JavaScript脚本创建多个线程，但是子线程完全受主线程控制，且不得操作DOM，并没有改变JavaScript单线程的本质</label>\n\n\n\"任务队列\"是一个先进先出的数据结构，排在前面的事件，优先被主线程读取。主线程的读取过程基本上是自动的，只要执行栈一清空，\"任务队列\"上第一位的事件就自动进入主线程。但是，由于存在后文提到的\"定时器\"功能，主线程首先要检查一下执行时间，某些事件只有到了规定的时间，才能返回主线程。\n\n#### 作用域链\n作用域链\n作用域链就是从当前作用域开始一层一层向上寻找某个变量，直到找到全局作用域还是没找到，就宣布放弃。这种一层一层的关系，就是作用域链。\n\n\n#### Event Loop 事件循环机制\n\n[requestAnimationFrame](https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame)\n\n\n[youtube上一个国外的小哥的分享，内容挺不错](https://www.youtube.com/watch?v=8aGhZQkoFbQ)\n\n[自己添加代码,动态查看 EventLoop的整个过程（配合下图理解会更加透彻）](http://latentflip.com/loupe/?code=JC5vbignYnV0dG9uJywgJ2NsaWNrJywgZnVuY3Rpb24gb25DbGljaygpIHsKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gdGltZXIoKSB7CiAgICAgICAgY29uc29sZS5sb2coJ1lvdSBjbGlja2VkIHRoZSBidXR0b24hJyk7ICAgIAogICAgfSwgMjAwMCk7Cn0pOwoKY29uc29sZS5sb2coIkhpISIpOwoKc2V0VGltZW91dChmdW5jdGlvbiB0aW1lb3V0KCkgewogICAgY29uc29sZS5sb2coIkNsaWNrIHRoZSBidXR0b24hIik7Cn0sIDUwMDApOwoKY29uc29sZS5sb2coIldlbGNvbWUgdG8gbG91cGUuIik7!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4%3D)\n\n![loop.png](https://raw.githubusercontent.com/itlilei/pic/master/20190711151224.png)","source":"_posts/FE /JS基础（三）JS运行机制 Event Loop.md","raw":"---\ntitle: JS基础（三）JS运行机制 Event Loop\n\ntags: js\ncategories: 前端\n---\n\n### JS运行机制\n\n#### 任务队列\nJS最大的特点就是单线程，所有任务需要排队，前一个任务结束，才会执行后一个任务。所有任务可以分成两种，一种是同步任务（synchronous），另一种是异步任务（asynchronous）。同步任务指的是，在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；异步任务指的是，不进入主线程、而进入\"任务队列\"（task queue）的任务，只有\"任务队列\"通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行，运行机制如下：\n\n    （1）所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）。\n\n    （2）主线程之外，还存在一个\"任务队列\"（task queue）。只要异步任务有了运行结果，就在\"任务队列\"之中放置一个事件。\n\n    （3）一旦\"执行栈\"中的所有同步任务执行完毕，系统就会读取\"任务队列\"，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。\n\n    （4）主线程不断重复上面的第三步。\n\n<label style=\"color:#CCCCCC\">HTML5提出Web Worker标准，允许JavaScript脚本创建多个线程，但是子线程完全受主线程控制，且不得操作DOM，并没有改变JavaScript单线程的本质</label>\n\n\n\"任务队列\"是一个先进先出的数据结构，排在前面的事件，优先被主线程读取。主线程的读取过程基本上是自动的，只要执行栈一清空，\"任务队列\"上第一位的事件就自动进入主线程。但是，由于存在后文提到的\"定时器\"功能，主线程首先要检查一下执行时间，某些事件只有到了规定的时间，才能返回主线程。\n\n#### 作用域链\n作用域链\n作用域链就是从当前作用域开始一层一层向上寻找某个变量，直到找到全局作用域还是没找到，就宣布放弃。这种一层一层的关系，就是作用域链。\n\n\n#### Event Loop 事件循环机制\n\n[requestAnimationFrame](https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame)\n\n\n[youtube上一个国外的小哥的分享，内容挺不错](https://www.youtube.com/watch?v=8aGhZQkoFbQ)\n\n[自己添加代码,动态查看 EventLoop的整个过程（配合下图理解会更加透彻）](http://latentflip.com/loupe/?code=JC5vbignYnV0dG9uJywgJ2NsaWNrJywgZnVuY3Rpb24gb25DbGljaygpIHsKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gdGltZXIoKSB7CiAgICAgICAgY29uc29sZS5sb2coJ1lvdSBjbGlja2VkIHRoZSBidXR0b24hJyk7ICAgIAogICAgfSwgMjAwMCk7Cn0pOwoKY29uc29sZS5sb2coIkhpISIpOwoKc2V0VGltZW91dChmdW5jdGlvbiB0aW1lb3V0KCkgewogICAgY29uc29sZS5sb2coIkNsaWNrIHRoZSBidXR0b24hIik7Cn0sIDUwMDApOwoKY29uc29sZS5sb2coIldlbGNvbWUgdG8gbG91cGUuIik7!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4%3D)\n\n![loop.png](https://raw.githubusercontent.com/itlilei/pic/master/20190711151224.png)","slug":"FE /JS基础（三）JS运行机制 Event Loop","published":1,"date":"2019-07-11T06:00:04.208Z","updated":"2019-07-11T08:36:04.376Z","_id":"cjxydaph80017d9v9zgw32ym2","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"JS运行机制\"><a href=\"#JS运行机制\" class=\"headerlink\" title=\"JS运行机制\"></a>JS运行机制</h3><h4 id=\"任务队列\"><a href=\"#任务队列\" class=\"headerlink\" title=\"任务队列\"></a>任务队列</h4><p>JS最大的特点就是单线程，所有任务需要排队，前一个任务结束，才会执行后一个任务。所有任务可以分成两种，一种是同步任务（synchronous），另一种是异步任务（asynchronous）。同步任务指的是，在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；异步任务指的是，不进入主线程、而进入”任务队列”（task queue）的任务，只有”任务队列”通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行，运行机制如下：</p>\n<pre><code>（1）所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）。\n\n（2）主线程之外，还存在一个&quot;任务队列&quot;（task queue）。只要异步任务有了运行结果，就在&quot;任务队列&quot;之中放置一个事件。\n\n（3）一旦&quot;执行栈&quot;中的所有同步任务执行完毕，系统就会读取&quot;任务队列&quot;，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。\n\n（4）主线程不断重复上面的第三步。\n</code></pre><label style=\"color:#CCCCCC\">HTML5提出Web Worker标准，允许JavaScript脚本创建多个线程，但是子线程完全受主线程控制，且不得操作DOM，并没有改变JavaScript单线程的本质</label>\n\n\n<p>“任务队列”是一个先进先出的数据结构，排在前面的事件，优先被主线程读取。主线程的读取过程基本上是自动的，只要执行栈一清空，”任务队列”上第一位的事件就自动进入主线程。但是，由于存在后文提到的”定时器”功能，主线程首先要检查一下执行时间，某些事件只有到了规定的时间，才能返回主线程。</p>\n<h4 id=\"作用域链\"><a href=\"#作用域链\" class=\"headerlink\" title=\"作用域链\"></a>作用域链</h4><p>作用域链<br>作用域链就是从当前作用域开始一层一层向上寻找某个变量，直到找到全局作用域还是没找到，就宣布放弃。这种一层一层的关系，就是作用域链。</p>\n<h4 id=\"Event-Loop-事件循环机制\"><a href=\"#Event-Loop-事件循环机制\" class=\"headerlink\" title=\"Event Loop 事件循环机制\"></a>Event Loop 事件循环机制</h4><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame\" target=\"_blank\" rel=\"noopener\">requestAnimationFrame</a></p>\n<p><a href=\"https://www.youtube.com/watch?v=8aGhZQkoFbQ\" target=\"_blank\" rel=\"noopener\">youtube上一个国外的小哥的分享，内容挺不错</a></p>\n<p><a href=\"http://latentflip.com/loupe/?code=JC5vbignYnV0dG9uJywgJ2NsaWNrJywgZnVuY3Rpb24gb25DbGljaygpIHsKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gdGltZXIoKSB7CiAgICAgICAgY29uc29sZS5sb2coJ1lvdSBjbGlja2VkIHRoZSBidXR0b24hJyk7ICAgIAogICAgfSwgMjAwMCk7Cn0pOwoKY29uc29sZS5sb2coIkhpISIpOwoKc2V0VGltZW91dChmdW5jdGlvbiB0aW1lb3V0KCkgewogICAgY29uc29sZS5sb2coIkNsaWNrIHRoZSBidXR0b24hIik7Cn0sIDUwMDApOwoKY29uc29sZS5sb2coIldlbGNvbWUgdG8gbG91cGUuIik7!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4%3D\" target=\"_blank\" rel=\"noopener\">自己添加代码,动态查看 EventLoop的整个过程（配合下图理解会更加透彻）</a></p>\n<p><img src=\"https://raw.githubusercontent.com/itlilei/pic/master/20190711151224.png\" alt=\"loop.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"JS运行机制\"><a href=\"#JS运行机制\" class=\"headerlink\" title=\"JS运行机制\"></a>JS运行机制</h3><h4 id=\"任务队列\"><a href=\"#任务队列\" class=\"headerlink\" title=\"任务队列\"></a>任务队列</h4><p>JS最大的特点就是单线程，所有任务需要排队，前一个任务结束，才会执行后一个任务。所有任务可以分成两种，一种是同步任务（synchronous），另一种是异步任务（asynchronous）。同步任务指的是，在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；异步任务指的是，不进入主线程、而进入”任务队列”（task queue）的任务，只有”任务队列”通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行，运行机制如下：</p>\n<pre><code>（1）所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）。\n\n（2）主线程之外，还存在一个&quot;任务队列&quot;（task queue）。只要异步任务有了运行结果，就在&quot;任务队列&quot;之中放置一个事件。\n\n（3）一旦&quot;执行栈&quot;中的所有同步任务执行完毕，系统就会读取&quot;任务队列&quot;，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。\n\n（4）主线程不断重复上面的第三步。\n</code></pre><label style=\"color:#CCCCCC\">HTML5提出Web Worker标准，允许JavaScript脚本创建多个线程，但是子线程完全受主线程控制，且不得操作DOM，并没有改变JavaScript单线程的本质</label>\n\n\n<p>“任务队列”是一个先进先出的数据结构，排在前面的事件，优先被主线程读取。主线程的读取过程基本上是自动的，只要执行栈一清空，”任务队列”上第一位的事件就自动进入主线程。但是，由于存在后文提到的”定时器”功能，主线程首先要检查一下执行时间，某些事件只有到了规定的时间，才能返回主线程。</p>\n<h4 id=\"作用域链\"><a href=\"#作用域链\" class=\"headerlink\" title=\"作用域链\"></a>作用域链</h4><p>作用域链<br>作用域链就是从当前作用域开始一层一层向上寻找某个变量，直到找到全局作用域还是没找到，就宣布放弃。这种一层一层的关系，就是作用域链。</p>\n<h4 id=\"Event-Loop-事件循环机制\"><a href=\"#Event-Loop-事件循环机制\" class=\"headerlink\" title=\"Event Loop 事件循环机制\"></a>Event Loop 事件循环机制</h4><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame\" target=\"_blank\" rel=\"noopener\">requestAnimationFrame</a></p>\n<p><a href=\"https://www.youtube.com/watch?v=8aGhZQkoFbQ\" target=\"_blank\" rel=\"noopener\">youtube上一个国外的小哥的分享，内容挺不错</a></p>\n<p><a href=\"http://latentflip.com/loupe/?code=JC5vbignYnV0dG9uJywgJ2NsaWNrJywgZnVuY3Rpb24gb25DbGljaygpIHsKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gdGltZXIoKSB7CiAgICAgICAgY29uc29sZS5sb2coJ1lvdSBjbGlja2VkIHRoZSBidXR0b24hJyk7ICAgIAogICAgfSwgMjAwMCk7Cn0pOwoKY29uc29sZS5sb2coIkhpISIpOwoKc2V0VGltZW91dChmdW5jdGlvbiB0aW1lb3V0KCkgewogICAgY29uc29sZS5sb2coIkNsaWNrIHRoZSBidXR0b24hIik7Cn0sIDUwMDApOwoKY29uc29sZS5sb2coIldlbGNvbWUgdG8gbG91cGUuIik7!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4%3D\" target=\"_blank\" rel=\"noopener\">自己添加代码,动态查看 EventLoop的整个过程（配合下图理解会更加透彻）</a></p>\n<p><img src=\"https://raw.githubusercontent.com/itlilei/pic/master/20190711151224.png\" alt=\"loop.png\"></p>\n"},{"title":"React-router4 分享 (一)","date":"2019-07-04T16:00:00.000Z","_content":"{% pdf  /pdf/react-router-1.pdf %}","source":"_posts/FE /React-router4 分享 (一).md","raw":"---\ntitle: React-router4 分享 (一)\ndate: 2019-07-05\ntags: \n  - js\n  - react\ncategories: 前端\n---\n{% pdf  /pdf/react-router-1.pdf %}","slug":"FE /React-router4 分享 (一)","published":1,"updated":"2019-07-11T10:08:29.421Z","_id":"cjxyietnv001ad9v9hgorc81p","comments":1,"layout":"post","photos":[],"link":"","content":"\n\n\t<div class=\"row\">\n    <embed src=\"/pdf/react-router-1.pdf\" width=\"100%\" height=\"550\" type=\"application/pdf\">\n\t</div>\n\n\n","site":{"data":{}},"excerpt":"","more":"\n\n\t<div class=\"row\">\n    <embed src=\"/pdf/react-router-1.pdf\" width=\"100%\" height=\"550\" type=\"application/pdf\">\n\t</div>\n\n\n"},{"title":"Promise详解","date":"2019-07-14T16:00:00.000Z","_content":"","source":"_posts/FE /Promise详解.md","raw":"---\ntitle: Promise详解\ndate: 2019-07-15\ntags: js\ncategories: 前端\n---","slug":"FE /Promise详解","published":1,"updated":"2019-07-15T07:37:07.794Z","_id":"cjxyif6h6001ed9v98jk1ruxr","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Fetch请求","date":"2019-07-14T16:00:00.000Z","_content":"\n#### input消除默认值，取消在手机上的点击高亮效果\n```css\n    input{\n        -webkit-tap-highlight-color: rgba(255, 255, 255, 0); \n        -webkit-user-select: none;\n        -moz-user-focus: none;\n        -moz-user-select: none;\n        -webkit-appearance:none;\n        outline: none;\n        border: none;\n    }\n```","source":"_posts/FE /CSS常用样式整理.md","raw":"---\ntitle: Fetch请求\ndate: 2019-07-15\ntags: css\ncategories: 前端\n---\n\n#### input消除默认值，取消在手机上的点击高亮效果\n```css\n    input{\n        -webkit-tap-highlight-color: rgba(255, 255, 255, 0); \n        -webkit-user-select: none;\n        -moz-user-focus: none;\n        -moz-user-select: none;\n        -webkit-appearance:none;\n        outline: none;\n        border: none;\n    }\n```","slug":"FE /CSS常用样式整理","published":1,"updated":"2019-07-18T09:17:23.438Z","_id":"cjy42nmko001fd9v96mjm44qg","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"input消除默认值，取消在手机上的点击高亮效果\"><a href=\"#input消除默认值，取消在手机上的点击高亮效果\" class=\"headerlink\" title=\"input消除默认值，取消在手机上的点击高亮效果\"></a>input消除默认值，取消在手机上的点击高亮效果</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">input</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-tap-highlight-color</span>: <span class=\"built_in\">rgba</span>(255, 255, 255, 0); </span><br><span class=\"line\">    <span class=\"attribute\">-webkit-user-select</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">-moz-user-focus</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">-moz-user-select</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-appearance</span>:none;</span><br><span class=\"line\">    <span class=\"attribute\">outline</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"input消除默认值，取消在手机上的点击高亮效果\"><a href=\"#input消除默认值，取消在手机上的点击高亮效果\" class=\"headerlink\" title=\"input消除默认值，取消在手机上的点击高亮效果\"></a>input消除默认值，取消在手机上的点击高亮效果</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">input</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-tap-highlight-color</span>: <span class=\"built_in\">rgba</span>(255, 255, 255, 0); </span><br><span class=\"line\">    <span class=\"attribute\">-webkit-user-select</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">-moz-user-focus</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">-moz-user-select</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-appearance</span>:none;</span><br><span class=\"line\">    <span class=\"attribute\">outline</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"_content":"https://github.com/YvetteLau/Blog/issues/25\n\n","source":"_posts/FE /JS基础（四）Proxy代理、Object.defineProperty详解及双向数据绑定实现.md","raw":"https://github.com/YvetteLau/Blog/issues/25\n\n","slug":"FE /JS基础（四）Proxy代理、Object.defineProperty详解及双向数据绑定实现","published":1,"date":"2019-07-16T02:35:11.780Z","updated":"2019-07-23T03:34:27.427Z","_id":"cjy57f550001od9v9r7xn1aao","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"https://github.com/YvetteLau/Blog/issues/25\" target=\"_blank\" rel=\"noopener\">https://github.com/YvetteLau/Blog/issues/25</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://github.com/YvetteLau/Blog/issues/25\" target=\"_blank\" rel=\"noopener\">https://github.com/YvetteLau/Blog/issues/25</a></p>\n"},{"title":"Node 常用模块","date":"2019-07-28T16:00:00.000Z","_content":"\n#### uuid\n生成uuid唯一标识,数据库唯一标识字段常用。先安装：\n`npm install --save uuid`\n\n使用：\n```javascript\nconst uuid =require('uuid')\nlet id=uuid.v1() //基于时间戳生成  （time-based）\nlet id2=uuid.v4() //随机生成  (random)\n\n```\n","source":"_posts/FE /node/node常用模块.md","raw":"---\ntitle: Node 常用模块\ndate: 2019-07-29\n# tags:\n#   - js\n#   - node\ncategories: 前端\n---\n\n#### uuid\n生成uuid唯一标识,数据库唯一标识字段常用。先安装：\n`npm install --save uuid`\n\n使用：\n```javascript\nconst uuid =require('uuid')\nlet id=uuid.v1() //基于时间戳生成  （time-based）\nlet id2=uuid.v4() //随机生成  (random)\n\n```\n","slug":"FE /node/node常用模块","published":1,"updated":"2019-07-29T10:08:53.670Z","_id":"cjy6x7krk001pd9v9s6haec08","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"uuid\"><a href=\"#uuid\" class=\"headerlink\" title=\"uuid\"></a>uuid</h4><p>生成uuid唯一标识,数据库唯一标识字段常用。先安装：<br><code>npm install --save uuid</code></p>\n<p>使用：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> uuid =<span class=\"built_in\">require</span>(<span class=\"string\">'uuid'</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> id=uuid.v1() <span class=\"comment\">//基于时间戳生成  （time-based）</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> id2=uuid.v4() <span class=\"comment\">//随机生成  (random)</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"uuid\"><a href=\"#uuid\" class=\"headerlink\" title=\"uuid\"></a>uuid</h4><p>生成uuid唯一标识,数据库唯一标识字段常用。先安装：<br><code>npm install --save uuid</code></p>\n<p>使用：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> uuid =<span class=\"built_in\">require</span>(<span class=\"string\">'uuid'</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> id=uuid.v1() <span class=\"comment\">//基于时间戳生成  （time-based）</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> id2=uuid.v4() <span class=\"comment\">//随机生成  (random)</span></span><br></pre></td></tr></table></figure></p>\n"},{"title":"Koa 教程","date":"2019-07-23T16:00:00.000Z","_content":"\n### koa入门\n1.初始化package.json\n`npm init`\n\n2.安装koa2\n`npm install koa`\n\n3.新建index.js（入口）文件\n``` javascript\nconst Koa =require('koa')\nconst app =new Koa()\napp.use(async (ctx)=>{\n    ctx.body='hello'\n})\napp.listen(5000)\nconsole.log('node of koa server is starting at port 5000')\n\n```\n4.启动服务\n`node index.js `\n\n5.浏览器访问 http://localhost:5000\n\n### koa http\n1.koa request\n\n```javascript\n// header\nctx.request.headers  \nctx.request. protocol\nctx.request.type\nctx.request.charset\n\n// method\nctx.request.method\nctx.request.query // get\nctx.request.body // post | 依赖 koa-bodyparse 第三方模块，后面章节有描述\n\n// path\nctx.request.url // path/?get=\nctx.request.path // path\n\n// host\nctx.request.host // hostname:port\nctx.request.hostname // hostname\nctx.request.ip\ncrx.request.subdomains \n\n// cookie\nctx.cookies.get('name') // 获取 cookie\nctx.cookies.set(name, value, { // 设置 cookie\n  'expires': new Date() // 时间\n  'path' : '/' // 路径\n  'domain': '0.0.0.0' // 域\n  'httpOnly': false // 禁止js获取\n})\n```\n\n2.koa response \n\n```javascript\n// header\nctx.set({})\n\n// status\nctx.response.status = 200\n\n// type\nctx.response.type = 'text/html; charset=utf-8' // defaule\n\n// redirect\nctx.response.redirect(url)\n```\n\n### 中间件 koa-router\n\n```javascript\nconst Koa =require('koa')\nconst app =new Koa()\nconst router= require('koa-router')()\nrouter.get('/',(ctx,next)=>{\n    ctx.body='get success'\n})\nrouter.post('/list',(ctx,next)=>{\n    ctx.body='list success'\n})\n//注册路由\n//app.use(router.routes())\napp.use(router.routes(),router.allowedMethods())\napp.listen(5000)\nconsole.log('node of koa server is starting at port 5000')\n\n```\n\n如果是多个模块的路由，可将路由拆成独立的js文件\n```javascript\n// 路由模块使用前需要先安装和实例化\nconst Router = require('koa-router')\nconst router = new Router()\n\n// 首页\napp.use(async (ctx, next) => {\n    if (ctx.request.path === '/') {\n      ctx.response.status = 200\n      ctx.response.body = 'index'\n    }\n    await next()\n})\n\n// 其他页面通过 router 加载\nlet urls = fs.readdirSync(__dirname + '/urls')\nurls.forEach((element) => {\n    let module = require(__dirname + '/urls/' + element)\n    /*\n      urls 下面的每个文件负责一个特定的功能，分开管理\n      通过 fs.readdirSync 读取 urls 目录下的所有文件名，挂载到 router 上面\n    */\n    router.use('/' + element.replace('.js', ''), module.routes(), module.allowedMethods())\n})\napp.use(router.routes())\n```\n根据代码配置，例如在 urls下新建home.js 路由模块 urls/home.js\n```javascript\nconst Router = require('koa-router')\nconst home = new Router()\n\n// /home\nhome.get('/', async (ctx, next) => {\n    ctx.response.status = 200\n    ctx.response.body = 'home'\n    await next()\n})\n\n// home/list\nhome.get('/list', async (ctx, next) => {\n    ctx.response.status = 200\n    ctx.response.body = 'home-list'\n    await next()\n})\n\nmodule.exports = home\n```\n\n注：其中router.allowedMethods()可加可不加，它的作用是当所有路由中间件执行完成之后,若ctx.status为空或者404的时候,丰富response对象的header头，参考 其源码内容\n\n```javascript\nRouter.prototype.allowedMethods = function (options) {\n  options = options || {};\n  var implemented = this.methods;\n\n  return function allowedMethods(ctx, next) {\n    return next().then(function() {\n      var allowed = {};\n\n    //重点代码\n    //当后续所有中间件执行完成之后,判断ctx的status,如果next中间件已经正确处理了response响应,则直接略过\n      if (!ctx.status || ctx.status === 404) {\n        ctx.matched.forEach(function (route) {\n          route.methods.forEach(function (method) {\n            allowed[method] = method;\n          });\n        });\n\n        var allowedArr = Object.keys(allowed);\n\n        if (!~implemented.indexOf(ctx.method)) {\n          if (options.throw) {\n            var notImplementedThrowable;\n            if (typeof options.notImplemented === 'function') {\n              notImplementedThrowable = options.notImplemented(); // set whatever the user returns from their function\n            } else {\n              notImplementedThrowable = new HttpError.NotImplemented();\n            }\n            throw notImplementedThrowable;\n          } else {\n            ctx.status = 501;\n            ctx.set('Allow', allowedArr);\n          }\n        } else if (allowedArr.length) {\n          if (ctx.method === 'OPTIONS') {\n            ctx.status = 200;\n            ctx.body = '';\n            ctx.set('Allow', allowedArr);\n          } else if (!allowed[ctx.method]) {\n            if (options.throw) {\n              var notAllowedThrowable;\n              if (typeof options.methodNotAllowed === 'function') {\n                notAllowedThrowable = options.methodNotAllowed(); // set whatever the user returns from their function\n              } else {\n                notAllowedThrowable = new HttpError.MethodNotAllowed();\n              }\n              throw notAllowedThrowable;\n            } else {\n              ctx.status = 405;\n              ctx.set('Allow', allowedArr);\n            }\n          }\n        }\n      }\n    });\n  };\n};\n```\n\n### koa-static 静态文件处理\n```javascript\nconst Koa =require('koa')\nconst app =new Koa()\nconst _static = require('koa-static')\n\napp.use(_static(__dirname, './static'))\napp.listen(5000)\n```\nstatic 下的资源就可以直接访问了\n","source":"_posts/FE /node/koa教程.md","raw":"---\ntitle: Koa 教程\ndate: 2019-07-24\n# tags:\n#   - js\n#   - node\n#   - koa\ncategories: 前端\n---\n\n### koa入门\n1.初始化package.json\n`npm init`\n\n2.安装koa2\n`npm install koa`\n\n3.新建index.js（入口）文件\n``` javascript\nconst Koa =require('koa')\nconst app =new Koa()\napp.use(async (ctx)=>{\n    ctx.body='hello'\n})\napp.listen(5000)\nconsole.log('node of koa server is starting at port 5000')\n\n```\n4.启动服务\n`node index.js `\n\n5.浏览器访问 http://localhost:5000\n\n### koa http\n1.koa request\n\n```javascript\n// header\nctx.request.headers  \nctx.request. protocol\nctx.request.type\nctx.request.charset\n\n// method\nctx.request.method\nctx.request.query // get\nctx.request.body // post | 依赖 koa-bodyparse 第三方模块，后面章节有描述\n\n// path\nctx.request.url // path/?get=\nctx.request.path // path\n\n// host\nctx.request.host // hostname:port\nctx.request.hostname // hostname\nctx.request.ip\ncrx.request.subdomains \n\n// cookie\nctx.cookies.get('name') // 获取 cookie\nctx.cookies.set(name, value, { // 设置 cookie\n  'expires': new Date() // 时间\n  'path' : '/' // 路径\n  'domain': '0.0.0.0' // 域\n  'httpOnly': false // 禁止js获取\n})\n```\n\n2.koa response \n\n```javascript\n// header\nctx.set({})\n\n// status\nctx.response.status = 200\n\n// type\nctx.response.type = 'text/html; charset=utf-8' // defaule\n\n// redirect\nctx.response.redirect(url)\n```\n\n### 中间件 koa-router\n\n```javascript\nconst Koa =require('koa')\nconst app =new Koa()\nconst router= require('koa-router')()\nrouter.get('/',(ctx,next)=>{\n    ctx.body='get success'\n})\nrouter.post('/list',(ctx,next)=>{\n    ctx.body='list success'\n})\n//注册路由\n//app.use(router.routes())\napp.use(router.routes(),router.allowedMethods())\napp.listen(5000)\nconsole.log('node of koa server is starting at port 5000')\n\n```\n\n如果是多个模块的路由，可将路由拆成独立的js文件\n```javascript\n// 路由模块使用前需要先安装和实例化\nconst Router = require('koa-router')\nconst router = new Router()\n\n// 首页\napp.use(async (ctx, next) => {\n    if (ctx.request.path === '/') {\n      ctx.response.status = 200\n      ctx.response.body = 'index'\n    }\n    await next()\n})\n\n// 其他页面通过 router 加载\nlet urls = fs.readdirSync(__dirname + '/urls')\nurls.forEach((element) => {\n    let module = require(__dirname + '/urls/' + element)\n    /*\n      urls 下面的每个文件负责一个特定的功能，分开管理\n      通过 fs.readdirSync 读取 urls 目录下的所有文件名，挂载到 router 上面\n    */\n    router.use('/' + element.replace('.js', ''), module.routes(), module.allowedMethods())\n})\napp.use(router.routes())\n```\n根据代码配置，例如在 urls下新建home.js 路由模块 urls/home.js\n```javascript\nconst Router = require('koa-router')\nconst home = new Router()\n\n// /home\nhome.get('/', async (ctx, next) => {\n    ctx.response.status = 200\n    ctx.response.body = 'home'\n    await next()\n})\n\n// home/list\nhome.get('/list', async (ctx, next) => {\n    ctx.response.status = 200\n    ctx.response.body = 'home-list'\n    await next()\n})\n\nmodule.exports = home\n```\n\n注：其中router.allowedMethods()可加可不加，它的作用是当所有路由中间件执行完成之后,若ctx.status为空或者404的时候,丰富response对象的header头，参考 其源码内容\n\n```javascript\nRouter.prototype.allowedMethods = function (options) {\n  options = options || {};\n  var implemented = this.methods;\n\n  return function allowedMethods(ctx, next) {\n    return next().then(function() {\n      var allowed = {};\n\n    //重点代码\n    //当后续所有中间件执行完成之后,判断ctx的status,如果next中间件已经正确处理了response响应,则直接略过\n      if (!ctx.status || ctx.status === 404) {\n        ctx.matched.forEach(function (route) {\n          route.methods.forEach(function (method) {\n            allowed[method] = method;\n          });\n        });\n\n        var allowedArr = Object.keys(allowed);\n\n        if (!~implemented.indexOf(ctx.method)) {\n          if (options.throw) {\n            var notImplementedThrowable;\n            if (typeof options.notImplemented === 'function') {\n              notImplementedThrowable = options.notImplemented(); // set whatever the user returns from their function\n            } else {\n              notImplementedThrowable = new HttpError.NotImplemented();\n            }\n            throw notImplementedThrowable;\n          } else {\n            ctx.status = 501;\n            ctx.set('Allow', allowedArr);\n          }\n        } else if (allowedArr.length) {\n          if (ctx.method === 'OPTIONS') {\n            ctx.status = 200;\n            ctx.body = '';\n            ctx.set('Allow', allowedArr);\n          } else if (!allowed[ctx.method]) {\n            if (options.throw) {\n              var notAllowedThrowable;\n              if (typeof options.methodNotAllowed === 'function') {\n                notAllowedThrowable = options.methodNotAllowed(); // set whatever the user returns from their function\n              } else {\n                notAllowedThrowable = new HttpError.MethodNotAllowed();\n              }\n              throw notAllowedThrowable;\n            } else {\n              ctx.status = 405;\n              ctx.set('Allow', allowedArr);\n            }\n          }\n        }\n      }\n    });\n  };\n};\n```\n\n### koa-static 静态文件处理\n```javascript\nconst Koa =require('koa')\nconst app =new Koa()\nconst _static = require('koa-static')\n\napp.use(_static(__dirname, './static'))\napp.listen(5000)\n```\nstatic 下的资源就可以直接访问了\n","slug":"FE /node/koa教程","published":1,"updated":"2019-07-24T13:27:39.321Z","_id":"cjygus7fo001ud9v92ssgjopm","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"koa入门\"><a href=\"#koa入门\" class=\"headerlink\" title=\"koa入门\"></a>koa入门</h3><p>1.初始化package.json<br><code>npm init</code></p>\n<p>2.安装koa2<br><code>npm install koa</code></p>\n<p>3.新建index.js（入口）文件<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Koa =<span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> app =<span class=\"keyword\">new</span> Koa()</span><br><span class=\"line\">app.use(<span class=\"keyword\">async</span> (ctx)=&gt;&#123;</span><br><span class=\"line\">    ctx.body=<span class=\"string\">'hello'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">app.listen(<span class=\"number\">5000</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'node of koa server is starting at port 5000'</span>)</span><br></pre></td></tr></table></figure></p>\n<p>4.启动服务<br><code>node index.js</code></p>\n<p>5.浏览器访问 <a href=\"http://localhost:5000\" target=\"_blank\" rel=\"noopener\">http://localhost:5000</a></p>\n<h3 id=\"koa-http\"><a href=\"#koa-http\" class=\"headerlink\" title=\"koa http\"></a>koa http</h3><p>1.koa request</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// header</span></span><br><span class=\"line\">ctx.request.headers  </span><br><span class=\"line\">ctx.request. protocol</span><br><span class=\"line\">ctx.request.type</span><br><span class=\"line\">ctx.request.charset</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// method</span></span><br><span class=\"line\">ctx.request.method</span><br><span class=\"line\">ctx.request.query <span class=\"comment\">// get</span></span><br><span class=\"line\">ctx.request.body <span class=\"comment\">// post | 依赖 koa-bodyparse 第三方模块，后面章节有描述</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// path</span></span><br><span class=\"line\">ctx.request.url <span class=\"comment\">// path/?get=</span></span><br><span class=\"line\">ctx.request.path <span class=\"comment\">// path</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// host</span></span><br><span class=\"line\">ctx.request.host <span class=\"comment\">// hostname:port</span></span><br><span class=\"line\">ctx.request.hostname <span class=\"comment\">// hostname</span></span><br><span class=\"line\">ctx.request.ip</span><br><span class=\"line\">crx.request.subdomains </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// cookie</span></span><br><span class=\"line\">ctx.cookies.get(<span class=\"string\">'name'</span>) <span class=\"comment\">// 获取 cookie</span></span><br><span class=\"line\">ctx.cookies.set(name, value, &#123; <span class=\"comment\">// 设置 cookie</span></span><br><span class=\"line\">  <span class=\"string\">'expires'</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() <span class=\"comment\">// 时间</span></span><br><span class=\"line\">  <span class=\"string\">'path'</span> : <span class=\"string\">'/'</span> <span class=\"comment\">// 路径</span></span><br><span class=\"line\">  <span class=\"string\">'domain'</span>: <span class=\"string\">'0.0.0.0'</span> <span class=\"comment\">// 域</span></span><br><span class=\"line\">  <span class=\"string\">'httpOnly'</span>: <span class=\"literal\">false</span> <span class=\"comment\">// 禁止js获取</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>2.koa response </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// header</span></span><br><span class=\"line\">ctx.set(&#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// status</span></span><br><span class=\"line\">ctx.response.status = <span class=\"number\">200</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// type</span></span><br><span class=\"line\">ctx.response.type = <span class=\"string\">'text/html; charset=utf-8'</span> <span class=\"comment\">// defaule</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// redirect</span></span><br><span class=\"line\">ctx.response.redirect(url)</span><br></pre></td></tr></table></figure>\n<h3 id=\"中间件-koa-router\"><a href=\"#中间件-koa-router\" class=\"headerlink\" title=\"中间件 koa-router\"></a>中间件 koa-router</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Koa =<span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> app =<span class=\"keyword\">new</span> Koa()</span><br><span class=\"line\"><span class=\"keyword\">const</span> router= <span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>)()</span><br><span class=\"line\">router.get(<span class=\"string\">'/'</span>,(ctx,next)=&gt;&#123;</span><br><span class=\"line\">    ctx.body=<span class=\"string\">'get success'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">router.post(<span class=\"string\">'/list'</span>,(ctx,next)=&gt;&#123;</span><br><span class=\"line\">    ctx.body=<span class=\"string\">'list success'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//注册路由</span></span><br><span class=\"line\"><span class=\"comment\">//app.use(router.routes())</span></span><br><span class=\"line\">app.use(router.routes(),router.allowedMethods())</span><br><span class=\"line\">app.listen(<span class=\"number\">5000</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'node of koa server is starting at port 5000'</span>)</span><br></pre></td></tr></table></figure>\n<p>如果是多个模块的路由，可将路由拆成独立的js文件<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 路由模块使用前需要先安装和实例化</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Router = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> Router()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 首页</span></span><br><span class=\"line\">app.use(<span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ctx.request.path === <span class=\"string\">'/'</span>) &#123;</span><br><span class=\"line\">      ctx.response.status = <span class=\"number\">200</span></span><br><span class=\"line\">      ctx.response.body = <span class=\"string\">'index'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> next()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 其他页面通过 router 加载</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> urls = fs.readdirSync(__dirname + <span class=\"string\">'/urls'</span>)</span><br><span class=\"line\">urls.forEach(<span class=\"function\">(<span class=\"params\">element</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"built_in\">module</span> = <span class=\"built_in\">require</span>(__dirname + <span class=\"string\">'/urls/'</span> + element)</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">      urls 下面的每个文件负责一个特定的功能，分开管理</span></span><br><span class=\"line\"><span class=\"comment\">      通过 fs.readdirSync 读取 urls 目录下的所有文件名，挂载到 router 上面</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    router.use(<span class=\"string\">'/'</span> + element.replace(<span class=\"string\">'.js'</span>, <span class=\"string\">''</span>), <span class=\"built_in\">module</span>.routes(), <span class=\"built_in\">module</span>.allowedMethods())</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">app.use(router.routes())</span><br></pre></td></tr></table></figure></p>\n<p>根据代码配置，例如在 urls下新建home.js 路由模块 urls/home.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Router = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> home = <span class=\"keyword\">new</span> Router()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// /home</span></span><br><span class=\"line\">home.get(<span class=\"string\">'/'</span>, <span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">    ctx.response.status = <span class=\"number\">200</span></span><br><span class=\"line\">    ctx.response.body = <span class=\"string\">'home'</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> next()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// home/list</span></span><br><span class=\"line\">home.get(<span class=\"string\">'/list'</span>, <span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">    ctx.response.status = <span class=\"number\">200</span></span><br><span class=\"line\">    ctx.response.body = <span class=\"string\">'home-list'</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> next()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = home</span><br></pre></td></tr></table></figure></p>\n<p>注：其中router.allowedMethods()可加可不加，它的作用是当所有路由中间件执行完成之后,若ctx.status为空或者404的时候,丰富response对象的header头，参考 其源码内容</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Router.prototype.allowedMethods = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">  options = options || &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> implemented = <span class=\"keyword\">this</span>.methods;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">allowedMethods</span>(<span class=\"params\">ctx, next</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> next().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> allowed = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//重点代码</span></span><br><span class=\"line\">    <span class=\"comment\">//当后续所有中间件执行完成之后,判断ctx的status,如果next中间件已经正确处理了response响应,则直接略过</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!ctx.status || ctx.status === <span class=\"number\">404</span>) &#123;</span><br><span class=\"line\">        ctx.matched.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">route</span>) </span>&#123;</span><br><span class=\"line\">          route.methods.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">method</span>) </span>&#123;</span><br><span class=\"line\">            allowed[method] = method;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> allowedArr = <span class=\"built_in\">Object</span>.keys(allowed);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!~implemented.indexOf(ctx.method)) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (options.throw) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> notImplementedThrowable;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> options.notImplemented === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">              notImplementedThrowable = options.notImplemented(); <span class=\"comment\">// set whatever the user returns from their function</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">              notImplementedThrowable = <span class=\"keyword\">new</span> HttpError.NotImplemented();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> notImplementedThrowable;</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            ctx.status = <span class=\"number\">501</span>;</span><br><span class=\"line\">            ctx.set(<span class=\"string\">'Allow'</span>, allowedArr);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (allowedArr.length) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (ctx.method === <span class=\"string\">'OPTIONS'</span>) &#123;</span><br><span class=\"line\">            ctx.status = <span class=\"number\">200</span>;</span><br><span class=\"line\">            ctx.body = <span class=\"string\">''</span>;</span><br><span class=\"line\">            ctx.set(<span class=\"string\">'Allow'</span>, allowedArr);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!allowed[ctx.method]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (options.throw) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">var</span> notAllowedThrowable;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> options.methodNotAllowed === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">                notAllowedThrowable = options.methodNotAllowed(); <span class=\"comment\">// set whatever the user returns from their function</span></span><br><span class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                notAllowedThrowable = <span class=\"keyword\">new</span> HttpError.MethodNotAllowed();</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"keyword\">throw</span> notAllowedThrowable;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">              ctx.status = <span class=\"number\">405</span>;</span><br><span class=\"line\">              ctx.set(<span class=\"string\">'Allow'</span>, allowedArr);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"koa-static-静态文件处理\"><a href=\"#koa-static-静态文件处理\" class=\"headerlink\" title=\"koa-static 静态文件处理\"></a>koa-static 静态文件处理</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Koa =<span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> app =<span class=\"keyword\">new</span> Koa()</span><br><span class=\"line\"><span class=\"keyword\">const</span> _static = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-static'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(_static(__dirname, <span class=\"string\">'./static'</span>))</span><br><span class=\"line\">app.listen(<span class=\"number\">5000</span>)</span><br></pre></td></tr></table></figure>\n<p>static 下的资源就可以直接访问了</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"koa入门\"><a href=\"#koa入门\" class=\"headerlink\" title=\"koa入门\"></a>koa入门</h3><p>1.初始化package.json<br><code>npm init</code></p>\n<p>2.安装koa2<br><code>npm install koa</code></p>\n<p>3.新建index.js（入口）文件<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Koa =<span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> app =<span class=\"keyword\">new</span> Koa()</span><br><span class=\"line\">app.use(<span class=\"keyword\">async</span> (ctx)=&gt;&#123;</span><br><span class=\"line\">    ctx.body=<span class=\"string\">'hello'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">app.listen(<span class=\"number\">5000</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'node of koa server is starting at port 5000'</span>)</span><br></pre></td></tr></table></figure></p>\n<p>4.启动服务<br><code>node index.js</code></p>\n<p>5.浏览器访问 <a href=\"http://localhost:5000\" target=\"_blank\" rel=\"noopener\">http://localhost:5000</a></p>\n<h3 id=\"koa-http\"><a href=\"#koa-http\" class=\"headerlink\" title=\"koa http\"></a>koa http</h3><p>1.koa request</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// header</span></span><br><span class=\"line\">ctx.request.headers  </span><br><span class=\"line\">ctx.request. protocol</span><br><span class=\"line\">ctx.request.type</span><br><span class=\"line\">ctx.request.charset</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// method</span></span><br><span class=\"line\">ctx.request.method</span><br><span class=\"line\">ctx.request.query <span class=\"comment\">// get</span></span><br><span class=\"line\">ctx.request.body <span class=\"comment\">// post | 依赖 koa-bodyparse 第三方模块，后面章节有描述</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// path</span></span><br><span class=\"line\">ctx.request.url <span class=\"comment\">// path/?get=</span></span><br><span class=\"line\">ctx.request.path <span class=\"comment\">// path</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// host</span></span><br><span class=\"line\">ctx.request.host <span class=\"comment\">// hostname:port</span></span><br><span class=\"line\">ctx.request.hostname <span class=\"comment\">// hostname</span></span><br><span class=\"line\">ctx.request.ip</span><br><span class=\"line\">crx.request.subdomains </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// cookie</span></span><br><span class=\"line\">ctx.cookies.get(<span class=\"string\">'name'</span>) <span class=\"comment\">// 获取 cookie</span></span><br><span class=\"line\">ctx.cookies.set(name, value, &#123; <span class=\"comment\">// 设置 cookie</span></span><br><span class=\"line\">  <span class=\"string\">'expires'</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() <span class=\"comment\">// 时间</span></span><br><span class=\"line\">  <span class=\"string\">'path'</span> : <span class=\"string\">'/'</span> <span class=\"comment\">// 路径</span></span><br><span class=\"line\">  <span class=\"string\">'domain'</span>: <span class=\"string\">'0.0.0.0'</span> <span class=\"comment\">// 域</span></span><br><span class=\"line\">  <span class=\"string\">'httpOnly'</span>: <span class=\"literal\">false</span> <span class=\"comment\">// 禁止js获取</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>2.koa response </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// header</span></span><br><span class=\"line\">ctx.set(&#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// status</span></span><br><span class=\"line\">ctx.response.status = <span class=\"number\">200</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// type</span></span><br><span class=\"line\">ctx.response.type = <span class=\"string\">'text/html; charset=utf-8'</span> <span class=\"comment\">// defaule</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// redirect</span></span><br><span class=\"line\">ctx.response.redirect(url)</span><br></pre></td></tr></table></figure>\n<h3 id=\"中间件-koa-router\"><a href=\"#中间件-koa-router\" class=\"headerlink\" title=\"中间件 koa-router\"></a>中间件 koa-router</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Koa =<span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> app =<span class=\"keyword\">new</span> Koa()</span><br><span class=\"line\"><span class=\"keyword\">const</span> router= <span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>)()</span><br><span class=\"line\">router.get(<span class=\"string\">'/'</span>,(ctx,next)=&gt;&#123;</span><br><span class=\"line\">    ctx.body=<span class=\"string\">'get success'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">router.post(<span class=\"string\">'/list'</span>,(ctx,next)=&gt;&#123;</span><br><span class=\"line\">    ctx.body=<span class=\"string\">'list success'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//注册路由</span></span><br><span class=\"line\"><span class=\"comment\">//app.use(router.routes())</span></span><br><span class=\"line\">app.use(router.routes(),router.allowedMethods())</span><br><span class=\"line\">app.listen(<span class=\"number\">5000</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'node of koa server is starting at port 5000'</span>)</span><br></pre></td></tr></table></figure>\n<p>如果是多个模块的路由，可将路由拆成独立的js文件<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 路由模块使用前需要先安装和实例化</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Router = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> Router()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 首页</span></span><br><span class=\"line\">app.use(<span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ctx.request.path === <span class=\"string\">'/'</span>) &#123;</span><br><span class=\"line\">      ctx.response.status = <span class=\"number\">200</span></span><br><span class=\"line\">      ctx.response.body = <span class=\"string\">'index'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> next()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 其他页面通过 router 加载</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> urls = fs.readdirSync(__dirname + <span class=\"string\">'/urls'</span>)</span><br><span class=\"line\">urls.forEach(<span class=\"function\">(<span class=\"params\">element</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"built_in\">module</span> = <span class=\"built_in\">require</span>(__dirname + <span class=\"string\">'/urls/'</span> + element)</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">      urls 下面的每个文件负责一个特定的功能，分开管理</span></span><br><span class=\"line\"><span class=\"comment\">      通过 fs.readdirSync 读取 urls 目录下的所有文件名，挂载到 router 上面</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    router.use(<span class=\"string\">'/'</span> + element.replace(<span class=\"string\">'.js'</span>, <span class=\"string\">''</span>), <span class=\"built_in\">module</span>.routes(), <span class=\"built_in\">module</span>.allowedMethods())</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">app.use(router.routes())</span><br></pre></td></tr></table></figure></p>\n<p>根据代码配置，例如在 urls下新建home.js 路由模块 urls/home.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Router = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> home = <span class=\"keyword\">new</span> Router()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// /home</span></span><br><span class=\"line\">home.get(<span class=\"string\">'/'</span>, <span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">    ctx.response.status = <span class=\"number\">200</span></span><br><span class=\"line\">    ctx.response.body = <span class=\"string\">'home'</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> next()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// home/list</span></span><br><span class=\"line\">home.get(<span class=\"string\">'/list'</span>, <span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">    ctx.response.status = <span class=\"number\">200</span></span><br><span class=\"line\">    ctx.response.body = <span class=\"string\">'home-list'</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> next()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = home</span><br></pre></td></tr></table></figure></p>\n<p>注：其中router.allowedMethods()可加可不加，它的作用是当所有路由中间件执行完成之后,若ctx.status为空或者404的时候,丰富response对象的header头，参考 其源码内容</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Router.prototype.allowedMethods = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">  options = options || &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> implemented = <span class=\"keyword\">this</span>.methods;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">allowedMethods</span>(<span class=\"params\">ctx, next</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> next().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> allowed = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//重点代码</span></span><br><span class=\"line\">    <span class=\"comment\">//当后续所有中间件执行完成之后,判断ctx的status,如果next中间件已经正确处理了response响应,则直接略过</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!ctx.status || ctx.status === <span class=\"number\">404</span>) &#123;</span><br><span class=\"line\">        ctx.matched.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">route</span>) </span>&#123;</span><br><span class=\"line\">          route.methods.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">method</span>) </span>&#123;</span><br><span class=\"line\">            allowed[method] = method;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> allowedArr = <span class=\"built_in\">Object</span>.keys(allowed);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!~implemented.indexOf(ctx.method)) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (options.throw) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> notImplementedThrowable;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> options.notImplemented === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">              notImplementedThrowable = options.notImplemented(); <span class=\"comment\">// set whatever the user returns from their function</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">              notImplementedThrowable = <span class=\"keyword\">new</span> HttpError.NotImplemented();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> notImplementedThrowable;</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            ctx.status = <span class=\"number\">501</span>;</span><br><span class=\"line\">            ctx.set(<span class=\"string\">'Allow'</span>, allowedArr);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (allowedArr.length) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (ctx.method === <span class=\"string\">'OPTIONS'</span>) &#123;</span><br><span class=\"line\">            ctx.status = <span class=\"number\">200</span>;</span><br><span class=\"line\">            ctx.body = <span class=\"string\">''</span>;</span><br><span class=\"line\">            ctx.set(<span class=\"string\">'Allow'</span>, allowedArr);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!allowed[ctx.method]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (options.throw) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">var</span> notAllowedThrowable;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> options.methodNotAllowed === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">                notAllowedThrowable = options.methodNotAllowed(); <span class=\"comment\">// set whatever the user returns from their function</span></span><br><span class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                notAllowedThrowable = <span class=\"keyword\">new</span> HttpError.MethodNotAllowed();</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"keyword\">throw</span> notAllowedThrowable;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">              ctx.status = <span class=\"number\">405</span>;</span><br><span class=\"line\">              ctx.set(<span class=\"string\">'Allow'</span>, allowedArr);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"koa-static-静态文件处理\"><a href=\"#koa-static-静态文件处理\" class=\"headerlink\" title=\"koa-static 静态文件处理\"></a>koa-static 静态文件处理</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Koa =<span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> app =<span class=\"keyword\">new</span> Koa()</span><br><span class=\"line\"><span class=\"keyword\">const</span> _static = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-static'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(_static(__dirname, <span class=\"string\">'./static'</span>))</span><br><span class=\"line\">app.listen(<span class=\"number\">5000</span>)</span><br></pre></td></tr></table></figure>\n<p>static 下的资源就可以直接访问了</p>\n"},{"title":"mac 开发效率提升小技巧","date":"2019-07-22T16:00:00.000Z","_content":"（待整理）\n\n1.文件预览功能  不打开文件的情况下预览文件基本信息 ，选中文件 按空格键\n\n2.快速获取文件当前路径  https://segmentfault.com/a/1190000018762739?utm_source=tag-newest\n","source":"_posts/Tools/mac开发效率提升小技巧.md","raw":"---\ntitle: mac 开发效率提升小技巧\ntags: mac\ndate: 2019-07-23\ncategories: 工具\n---\n（待整理）\n\n1.文件预览功能  不打开文件的情况下预览文件基本信息 ，选中文件 按空格键\n\n2.快速获取文件当前路径  https://segmentfault.com/a/1190000018762739?utm_source=tag-newest\n","slug":"Tools/mac开发效率提升小技巧","published":1,"updated":"2019-07-24T11:49:02.207Z","_id":"cjyh6enx50000r9v9ayuhbn8e","comments":1,"layout":"post","photos":[],"link":"","content":"<p>（待整理）</p>\n<p>1.文件预览功能  不打开文件的情况下预览文件基本信息 ，选中文件 按空格键</p>\n<p>2.快速获取文件当前路径  <a href=\"https://segmentfault.com/a/1190000018762739?utm_source=tag-newest\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000018762739?utm_source=tag-newest</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>（待整理）</p>\n<p>1.文件预览功能  不打开文件的情况下预览文件基本信息 ，选中文件 按空格键</p>\n<p>2.快速获取文件当前路径  <a href=\"https://segmentfault.com/a/1190000018762739?utm_source=tag-newest\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000018762739?utm_source=tag-newest</a></p>\n"},{"title":"koa 使用redis教程","date":"2019-07-24T16:00:00.000Z","_content":"\n### 安装教程\n\n1.安装redis\n`brew install redis`\n\n2.启动服务端 \n`redis-server`\n\n启动成功后如下图所示：\n![20190725151443.png](https://raw.githubusercontent.com/itlilei/pic/master/20190725151443.png)\n\n3.mac 下安装redis管理工具 rdm  （安装包网上很多，搜索下载即可，windows下同理）\n\n安装完成后： name自己取一个，host 为本机host，点击ok即可\n\n![20190725151823.png](https://raw.githubusercontent.com/itlilei/pic/master/20190725151823.png)\n\nredis命令及教程可参考：https://www.runoob.com/redis/redis-keys.html\n\n### koa 中使用redis \n\n1.安装redis\n`npm install redis koa-redis --save`\n\n2.使用redis\n```javascript\nconst Koa =require('koa')\nconst app =new Koa()\nconst redis=require('redis')\nconst redisStore =require('koa-redis')\n\n//服务器的ip和端口号 \nvar client=redis.createClient(6379,'127.0.0.1')\nvar store=redisStore({\n    client:client,\n    db:'db0'\n})\n\napp.use(async (ctx)=>{\n    await store.client.set('word','first success')\n    ctx.body=await store.client.get('word')\n})\n\napp.listen(5000)\nconsole.log('node of koa server is starting at port 5000')\n```\n浏览器中访问 localhost:5000，在rdm中查看存储的值“word”\n\n![20190725170311.png](https://raw.githubusercontent.com/itlilei/pic/master/20190725170311.png)\n\nRedis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)\n\n操作其他数据类型参考上面的教程链接","source":"_posts/FE /node/koa 使用 redis教程.md","raw":"---\ntitle: koa 使用redis教程\ndate: 2019-07-25\ntags:\n  - js\n  - node\n  - koa\ncategories: 前端\n---\n\n### 安装教程\n\n1.安装redis\n`brew install redis`\n\n2.启动服务端 \n`redis-server`\n\n启动成功后如下图所示：\n![20190725151443.png](https://raw.githubusercontent.com/itlilei/pic/master/20190725151443.png)\n\n3.mac 下安装redis管理工具 rdm  （安装包网上很多，搜索下载即可，windows下同理）\n\n安装完成后： name自己取一个，host 为本机host，点击ok即可\n\n![20190725151823.png](https://raw.githubusercontent.com/itlilei/pic/master/20190725151823.png)\n\nredis命令及教程可参考：https://www.runoob.com/redis/redis-keys.html\n\n### koa 中使用redis \n\n1.安装redis\n`npm install redis koa-redis --save`\n\n2.使用redis\n```javascript\nconst Koa =require('koa')\nconst app =new Koa()\nconst redis=require('redis')\nconst redisStore =require('koa-redis')\n\n//服务器的ip和端口号 \nvar client=redis.createClient(6379,'127.0.0.1')\nvar store=redisStore({\n    client:client,\n    db:'db0'\n})\n\napp.use(async (ctx)=>{\n    await store.client.set('word','first success')\n    ctx.body=await store.client.get('word')\n})\n\napp.listen(5000)\nconsole.log('node of koa server is starting at port 5000')\n```\n浏览器中访问 localhost:5000，在rdm中查看存储的值“word”\n\n![20190725170311.png](https://raw.githubusercontent.com/itlilei/pic/master/20190725170311.png)\n\nRedis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)\n\n操作其他数据类型参考上面的教程链接","slug":"FE /node/koa 使用 redis教程","published":1,"updated":"2019-07-25T09:04:05.346Z","_id":"cjyic7el30006r9v9lm6aevxr","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"安装教程\"><a href=\"#安装教程\" class=\"headerlink\" title=\"安装教程\"></a>安装教程</h3><p>1.安装redis<br><code>brew install redis</code></p>\n<p>2.启动服务端<br><code>redis-server</code></p>\n<p>启动成功后如下图所示：<br><img src=\"https://raw.githubusercontent.com/itlilei/pic/master/20190725151443.png\" alt=\"20190725151443.png\"></p>\n<p>3.mac 下安装redis管理工具 rdm  （安装包网上很多，搜索下载即可，windows下同理）</p>\n<p>安装完成后： name自己取一个，host 为本机host，点击ok即可</p>\n<p><img src=\"https://raw.githubusercontent.com/itlilei/pic/master/20190725151823.png\" alt=\"20190725151823.png\"></p>\n<p>redis命令及教程可参考：<a href=\"https://www.runoob.com/redis/redis-keys.html\" target=\"_blank\" rel=\"noopener\">https://www.runoob.com/redis/redis-keys.html</a></p>\n<h3 id=\"koa-中使用redis\"><a href=\"#koa-中使用redis\" class=\"headerlink\" title=\"koa 中使用redis\"></a>koa 中使用redis</h3><p>1.安装redis<br><code>npm install redis koa-redis --save</code></p>\n<p>2.使用redis<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Koa =<span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> app =<span class=\"keyword\">new</span> Koa()</span><br><span class=\"line\"><span class=\"keyword\">const</span> redis=<span class=\"built_in\">require</span>(<span class=\"string\">'redis'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> redisStore =<span class=\"built_in\">require</span>(<span class=\"string\">'koa-redis'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//服务器的ip和端口号 </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> client=redis.createClient(<span class=\"number\">6379</span>,<span class=\"string\">'127.0.0.1'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> store=redisStore(&#123;</span><br><span class=\"line\">    client:client,</span><br><span class=\"line\">    db:<span class=\"string\">'db0'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"keyword\">async</span> (ctx)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> store.client.set(<span class=\"string\">'word'</span>,<span class=\"string\">'first success'</span>)</span><br><span class=\"line\">    ctx.body=<span class=\"keyword\">await</span> store.client.get(<span class=\"string\">'word'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">5000</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'node of koa server is starting at port 5000'</span>)</span><br></pre></td></tr></table></figure></p>\n<p>浏览器中访问 localhost:5000，在rdm中查看存储的值“word”</p>\n<p><img src=\"https://raw.githubusercontent.com/itlilei/pic/master/20190725170311.png\" alt=\"20190725170311.png\"></p>\n<p>Redis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)</p>\n<p>操作其他数据类型参考上面的教程链接</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"安装教程\"><a href=\"#安装教程\" class=\"headerlink\" title=\"安装教程\"></a>安装教程</h3><p>1.安装redis<br><code>brew install redis</code></p>\n<p>2.启动服务端<br><code>redis-server</code></p>\n<p>启动成功后如下图所示：<br><img src=\"https://raw.githubusercontent.com/itlilei/pic/master/20190725151443.png\" alt=\"20190725151443.png\"></p>\n<p>3.mac 下安装redis管理工具 rdm  （安装包网上很多，搜索下载即可，windows下同理）</p>\n<p>安装完成后： name自己取一个，host 为本机host，点击ok即可</p>\n<p><img src=\"https://raw.githubusercontent.com/itlilei/pic/master/20190725151823.png\" alt=\"20190725151823.png\"></p>\n<p>redis命令及教程可参考：<a href=\"https://www.runoob.com/redis/redis-keys.html\" target=\"_blank\" rel=\"noopener\">https://www.runoob.com/redis/redis-keys.html</a></p>\n<h3 id=\"koa-中使用redis\"><a href=\"#koa-中使用redis\" class=\"headerlink\" title=\"koa 中使用redis\"></a>koa 中使用redis</h3><p>1.安装redis<br><code>npm install redis koa-redis --save</code></p>\n<p>2.使用redis<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Koa =<span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> app =<span class=\"keyword\">new</span> Koa()</span><br><span class=\"line\"><span class=\"keyword\">const</span> redis=<span class=\"built_in\">require</span>(<span class=\"string\">'redis'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> redisStore =<span class=\"built_in\">require</span>(<span class=\"string\">'koa-redis'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//服务器的ip和端口号 </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> client=redis.createClient(<span class=\"number\">6379</span>,<span class=\"string\">'127.0.0.1'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> store=redisStore(&#123;</span><br><span class=\"line\">    client:client,</span><br><span class=\"line\">    db:<span class=\"string\">'db0'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"keyword\">async</span> (ctx)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> store.client.set(<span class=\"string\">'word'</span>,<span class=\"string\">'first success'</span>)</span><br><span class=\"line\">    ctx.body=<span class=\"keyword\">await</span> store.client.get(<span class=\"string\">'word'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">5000</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'node of koa server is starting at port 5000'</span>)</span><br></pre></td></tr></table></figure></p>\n<p>浏览器中访问 localhost:5000，在rdm中查看存储的值“word”</p>\n<p><img src=\"https://raw.githubusercontent.com/itlilei/pic/master/20190725170311.png\" alt=\"20190725170311.png\"></p>\n<p>Redis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)</p>\n<p>操作其他数据类型参考上面的教程链接</p>\n"},{"title":"koa解决跨域问题","date":"2019-07-29T16:00:00.000Z","_content":"\n#### 使用koa2-cors模块\n\n先安装  `npm install --save koa2-cors`\n\n使用方法：\n```javascript\nconst Koa =require('koa')\nconst cors=require('koa2-cors')\nconst router = require('koa-router')(); \nvar app=new Koa()\napp.use(cors())\n\nrouter.get('/index',ctx=>{\n    ctx.body={name:'koa'}\n}) \napp.use(router.routes(),router.allowedMethods())\napp.listen('5000')\n```\n在浏览器中随便打开一个网页，控制台调用（api.jd.com 本地做了host配置映射到 127.0.0.1），也在浏览器的Network模块查看返回结果：\n![20190730212113.png](https://raw.githubusercontent.com/itlilei/pic/master/20190730212113.png)\n\n复杂用法：也可对请求添加各种个性化参数配置\n```javascript\napp.use(cors({\n    origin: function (ctx) {\n        if (ctx.url === '/test') {\n            return \"*\"; // 允许来自所有域名请求\n        }\n        return 'http://api.jd.com:5000'; / 这样就能只允许 http://api.jd.com:5000 这个域名的请求了\n    },\n    exposeHeaders: ['WWW-Authenticate', 'Server-Authorization'],\n    maxAge: 5,\n    credentials: true,\n    allowMethods: ['GET', 'POST', 'DELETE'],\n    allowHeaders: ['Content-Type', 'Authorization', 'Accept']\n}))\n```\n\n#### 实现原理，即用原生node实现\n```javascript\napp.use(async (ctx, next) => {\n    // 允许来自所有域名请求\n    ctx.set(\"Access-Control-Allow-Origin\", \"*\");\n    // 这样就能只允许 http://localhost:8080 这个域名的请求了\n    // ctx.set(\"Access-Control-Allow-Origin\", \"http://localhost:8080\"); \n\n    // 设置所允许的HTTP请求方法\n    ctx.set(\"Access-Control-Allow-Methods\", \"OPTIONS, GET, PUT, POST, DELETE\");\n\n    // 字段是必需的。它也是一个逗号分隔的字符串，表明服务器支持的所有头信息字段.\n    ctx.set(\"Access-Control-Allow-Headers\", \"x-requested-with, accept, origin, content-type\");\n\n    // 服务器收到请求以后，检查了Origin、Access-Control-Request-Method和Access-Control-Request-Headers字段以后，确认允许跨源请求，就可以做出回应。\n\n    // Content-Type表示具体请求中的媒体类型信息\n    ctx.set(\"Content-Type\", \"application/json;charset=utf-8\");\n\n    // 该字段可选。它的值是一个布尔值，表示是否允许发送Cookie。默认情况下，Cookie不包括在CORS请求之中。\n    // 当设置成允许请求携带cookie时，需要保证\"Access-Control-Allow-Origin\"是服务器有的域名，而不能是\"*\";\n    ctx.set(\"Access-Control-Allow-Credentials\", true);\n\n    // 该字段可选，用来指定本次预检请求的有效期，单位为秒。\n    // 当请求方法是PUT或DELETE等特殊方法或者Content-Type字段的类型是application/json时，服务器会提前发送一次请求进行验证\n    // 下面的的设置只本次验证的有效时间，即在该时间段内服务端可以不用进行验证\n    ctx.set(\"Access-Control-Max-Age\", 300);\n\n    /*\n    CORS请求时，XMLHttpRequest对象的getResponseHeader()方法只能拿到6个基本字段：\n        Cache-Control、\n        Content-Language、\n        Content-Type、\n        Expires、\n        Last-Modified、\n        Pragma。\n    */\n    // 需要获取其他字段时，使用Access-Control-Expose-Headers，\n    // getResponseHeader('myData')可以返回我们所需的值\n    ctx.set(\"Access-Control-Expose-Headers\", \"myData\");\n\n    await next();\n})\n\n```\n注释掉上文中的 app.use(cors()) 部分，替换成原生node实现，调用方法同上，效果是一致的,根据实际需要，设置不同的参数配置。","source":"_posts/FE /node/koa解决跨域问题.md","raw":"---\ntitle: koa解决跨域问题\ndate: 2019-07-30\ntags:\n  - js\n  - node\n  - koa\ncategories: 前端\n---\n\n#### 使用koa2-cors模块\n\n先安装  `npm install --save koa2-cors`\n\n使用方法：\n```javascript\nconst Koa =require('koa')\nconst cors=require('koa2-cors')\nconst router = require('koa-router')(); \nvar app=new Koa()\napp.use(cors())\n\nrouter.get('/index',ctx=>{\n    ctx.body={name:'koa'}\n}) \napp.use(router.routes(),router.allowedMethods())\napp.listen('5000')\n```\n在浏览器中随便打开一个网页，控制台调用（api.jd.com 本地做了host配置映射到 127.0.0.1），也在浏览器的Network模块查看返回结果：\n![20190730212113.png](https://raw.githubusercontent.com/itlilei/pic/master/20190730212113.png)\n\n复杂用法：也可对请求添加各种个性化参数配置\n```javascript\napp.use(cors({\n    origin: function (ctx) {\n        if (ctx.url === '/test') {\n            return \"*\"; // 允许来自所有域名请求\n        }\n        return 'http://api.jd.com:5000'; / 这样就能只允许 http://api.jd.com:5000 这个域名的请求了\n    },\n    exposeHeaders: ['WWW-Authenticate', 'Server-Authorization'],\n    maxAge: 5,\n    credentials: true,\n    allowMethods: ['GET', 'POST', 'DELETE'],\n    allowHeaders: ['Content-Type', 'Authorization', 'Accept']\n}))\n```\n\n#### 实现原理，即用原生node实现\n```javascript\napp.use(async (ctx, next) => {\n    // 允许来自所有域名请求\n    ctx.set(\"Access-Control-Allow-Origin\", \"*\");\n    // 这样就能只允许 http://localhost:8080 这个域名的请求了\n    // ctx.set(\"Access-Control-Allow-Origin\", \"http://localhost:8080\"); \n\n    // 设置所允许的HTTP请求方法\n    ctx.set(\"Access-Control-Allow-Methods\", \"OPTIONS, GET, PUT, POST, DELETE\");\n\n    // 字段是必需的。它也是一个逗号分隔的字符串，表明服务器支持的所有头信息字段.\n    ctx.set(\"Access-Control-Allow-Headers\", \"x-requested-with, accept, origin, content-type\");\n\n    // 服务器收到请求以后，检查了Origin、Access-Control-Request-Method和Access-Control-Request-Headers字段以后，确认允许跨源请求，就可以做出回应。\n\n    // Content-Type表示具体请求中的媒体类型信息\n    ctx.set(\"Content-Type\", \"application/json;charset=utf-8\");\n\n    // 该字段可选。它的值是一个布尔值，表示是否允许发送Cookie。默认情况下，Cookie不包括在CORS请求之中。\n    // 当设置成允许请求携带cookie时，需要保证\"Access-Control-Allow-Origin\"是服务器有的域名，而不能是\"*\";\n    ctx.set(\"Access-Control-Allow-Credentials\", true);\n\n    // 该字段可选，用来指定本次预检请求的有效期，单位为秒。\n    // 当请求方法是PUT或DELETE等特殊方法或者Content-Type字段的类型是application/json时，服务器会提前发送一次请求进行验证\n    // 下面的的设置只本次验证的有效时间，即在该时间段内服务端可以不用进行验证\n    ctx.set(\"Access-Control-Max-Age\", 300);\n\n    /*\n    CORS请求时，XMLHttpRequest对象的getResponseHeader()方法只能拿到6个基本字段：\n        Cache-Control、\n        Content-Language、\n        Content-Type、\n        Expires、\n        Last-Modified、\n        Pragma。\n    */\n    // 需要获取其他字段时，使用Access-Control-Expose-Headers，\n    // getResponseHeader('myData')可以返回我们所需的值\n    ctx.set(\"Access-Control-Expose-Headers\", \"myData\");\n\n    await next();\n})\n\n```\n注释掉上文中的 app.use(cors()) 部分，替换成原生node实现，调用方法同上，效果是一致的,根据实际需要，设置不同的参数配置。","slug":"FE /node/koa解决跨域问题","published":1,"updated":"2019-07-30T13:35:37.599Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjypvaf8o0000wzv9fzz2ltjo","content":"<h4 id=\"使用koa2-cors模块\"><a href=\"#使用koa2-cors模块\" class=\"headerlink\" title=\"使用koa2-cors模块\"></a>使用koa2-cors模块</h4><p>先安装  <code>npm install --save koa2-cors</code></p>\n<p>使用方法：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Koa =<span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> cors=<span class=\"built_in\">require</span>(<span class=\"string\">'koa2-cors'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>)(); </span><br><span class=\"line\"><span class=\"keyword\">var</span> app=<span class=\"keyword\">new</span> Koa()</span><br><span class=\"line\">app.use(cors())</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/index'</span>,ctx=&gt;&#123;</span><br><span class=\"line\">    ctx.body=&#123;<span class=\"attr\">name</span>:<span class=\"string\">'koa'</span>&#125;</span><br><span class=\"line\">&#125;) </span><br><span class=\"line\">app.use(router.routes(),router.allowedMethods())</span><br><span class=\"line\">app.listen(<span class=\"string\">'5000'</span>)</span><br></pre></td></tr></table></figure></p>\n<p>在浏览器中随便打开一个网页，控制台调用（api.jd.com 本地做了host配置映射到 127.0.0.1），也在浏览器的Network模块查看返回结果：<br><img src=\"https://raw.githubusercontent.com/itlilei/pic/master/20190730212113.png\" alt=\"20190730212113.png\"></p>\n<p>复杂用法：也可对请求添加各种个性化参数配置<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(cors(&#123;</span><br><span class=\"line\">    origin: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ctx</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ctx.url === <span class=\"string\">'/test'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"*\"</span>; <span class=\"comment\">// 允许来自所有域名请求</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'http://api.jd.com:5000'</span>; <span class=\"regexp\">/ 这样就能只允许 http:/</span><span class=\"regexp\">/api.jd.com:5000 这个域名的请求了</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">    exposeHeaders: ['WWW-Authenticate', 'Server-Authorization'],</span></span><br><span class=\"line\"><span class=\"regexp\">    maxAge: 5,</span></span><br><span class=\"line\"><span class=\"regexp\">    credentials: true,</span></span><br><span class=\"line\"><span class=\"regexp\">    allowMethods: ['GET', 'POST', 'DELETE'],</span></span><br><span class=\"line\"><span class=\"regexp\">    allowHeaders: ['Content-Type', 'Authorization', 'Accept']</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;))</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"实现原理，即用原生node实现\"><a href=\"#实现原理，即用原生node实现\" class=\"headerlink\" title=\"实现原理，即用原生node实现\"></a>实现原理，即用原生node实现</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(<span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 允许来自所有域名请求</span></span><br><span class=\"line\">    ctx.set(<span class=\"string\">\"Access-Control-Allow-Origin\"</span>, <span class=\"string\">\"*\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 这样就能只允许 http://localhost:8080 这个域名的请求了</span></span><br><span class=\"line\">    <span class=\"comment\">// ctx.set(\"Access-Control-Allow-Origin\", \"http://localhost:8080\"); </span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 设置所允许的HTTP请求方法</span></span><br><span class=\"line\">    ctx.set(<span class=\"string\">\"Access-Control-Allow-Methods\"</span>, <span class=\"string\">\"OPTIONS, GET, PUT, POST, DELETE\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 字段是必需的。它也是一个逗号分隔的字符串，表明服务器支持的所有头信息字段.</span></span><br><span class=\"line\">    ctx.set(<span class=\"string\">\"Access-Control-Allow-Headers\"</span>, <span class=\"string\">\"x-requested-with, accept, origin, content-type\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 服务器收到请求以后，检查了Origin、Access-Control-Request-Method和Access-Control-Request-Headers字段以后，确认允许跨源请求，就可以做出回应。</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Content-Type表示具体请求中的媒体类型信息</span></span><br><span class=\"line\">    ctx.set(<span class=\"string\">\"Content-Type\"</span>, <span class=\"string\">\"application/json;charset=utf-8\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 该字段可选。它的值是一个布尔值，表示是否允许发送Cookie。默认情况下，Cookie不包括在CORS请求之中。</span></span><br><span class=\"line\">    <span class=\"comment\">// 当设置成允许请求携带cookie时，需要保证\"Access-Control-Allow-Origin\"是服务器有的域名，而不能是\"*\";</span></span><br><span class=\"line\">    ctx.set(<span class=\"string\">\"Access-Control-Allow-Credentials\"</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 该字段可选，用来指定本次预检请求的有效期，单位为秒。</span></span><br><span class=\"line\">    <span class=\"comment\">// 当请求方法是PUT或DELETE等特殊方法或者Content-Type字段的类型是application/json时，服务器会提前发送一次请求进行验证</span></span><br><span class=\"line\">    <span class=\"comment\">// 下面的的设置只本次验证的有效时间，即在该时间段内服务端可以不用进行验证</span></span><br><span class=\"line\">    ctx.set(<span class=\"string\">\"Access-Control-Max-Age\"</span>, <span class=\"number\">300</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    CORS请求时，XMLHttpRequest对象的getResponseHeader()方法只能拿到6个基本字段：</span></span><br><span class=\"line\"><span class=\"comment\">        Cache-Control、</span></span><br><span class=\"line\"><span class=\"comment\">        Content-Language、</span></span><br><span class=\"line\"><span class=\"comment\">        Content-Type、</span></span><br><span class=\"line\"><span class=\"comment\">        Expires、</span></span><br><span class=\"line\"><span class=\"comment\">        Last-Modified、</span></span><br><span class=\"line\"><span class=\"comment\">        Pragma。</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"comment\">// 需要获取其他字段时，使用Access-Control-Expose-Headers，</span></span><br><span class=\"line\">    <span class=\"comment\">// getResponseHeader('myData')可以返回我们所需的值</span></span><br><span class=\"line\">    ctx.set(<span class=\"string\">\"Access-Control-Expose-Headers\"</span>, <span class=\"string\">\"myData\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">await</span> next();</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>注释掉上文中的 app.use(cors()) 部分，替换成原生node实现，调用方法同上，效果是一致的,根据实际需要，设置不同的参数配置。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"使用koa2-cors模块\"><a href=\"#使用koa2-cors模块\" class=\"headerlink\" title=\"使用koa2-cors模块\"></a>使用koa2-cors模块</h4><p>先安装  <code>npm install --save koa2-cors</code></p>\n<p>使用方法：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Koa =<span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> cors=<span class=\"built_in\">require</span>(<span class=\"string\">'koa2-cors'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>)(); </span><br><span class=\"line\"><span class=\"keyword\">var</span> app=<span class=\"keyword\">new</span> Koa()</span><br><span class=\"line\">app.use(cors())</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/index'</span>,ctx=&gt;&#123;</span><br><span class=\"line\">    ctx.body=&#123;<span class=\"attr\">name</span>:<span class=\"string\">'koa'</span>&#125;</span><br><span class=\"line\">&#125;) </span><br><span class=\"line\">app.use(router.routes(),router.allowedMethods())</span><br><span class=\"line\">app.listen(<span class=\"string\">'5000'</span>)</span><br></pre></td></tr></table></figure></p>\n<p>在浏览器中随便打开一个网页，控制台调用（api.jd.com 本地做了host配置映射到 127.0.0.1），也在浏览器的Network模块查看返回结果：<br><img src=\"https://raw.githubusercontent.com/itlilei/pic/master/20190730212113.png\" alt=\"20190730212113.png\"></p>\n<p>复杂用法：也可对请求添加各种个性化参数配置<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(cors(&#123;</span><br><span class=\"line\">    origin: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ctx</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ctx.url === <span class=\"string\">'/test'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"*\"</span>; <span class=\"comment\">// 允许来自所有域名请求</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'http://api.jd.com:5000'</span>; <span class=\"regexp\">/ 这样就能只允许 http:/</span><span class=\"regexp\">/api.jd.com:5000 这个域名的请求了</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">    exposeHeaders: ['WWW-Authenticate', 'Server-Authorization'],</span></span><br><span class=\"line\"><span class=\"regexp\">    maxAge: 5,</span></span><br><span class=\"line\"><span class=\"regexp\">    credentials: true,</span></span><br><span class=\"line\"><span class=\"regexp\">    allowMethods: ['GET', 'POST', 'DELETE'],</span></span><br><span class=\"line\"><span class=\"regexp\">    allowHeaders: ['Content-Type', 'Authorization', 'Accept']</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;))</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"实现原理，即用原生node实现\"><a href=\"#实现原理，即用原生node实现\" class=\"headerlink\" title=\"实现原理，即用原生node实现\"></a>实现原理，即用原生node实现</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(<span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 允许来自所有域名请求</span></span><br><span class=\"line\">    ctx.set(<span class=\"string\">\"Access-Control-Allow-Origin\"</span>, <span class=\"string\">\"*\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 这样就能只允许 http://localhost:8080 这个域名的请求了</span></span><br><span class=\"line\">    <span class=\"comment\">// ctx.set(\"Access-Control-Allow-Origin\", \"http://localhost:8080\"); </span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 设置所允许的HTTP请求方法</span></span><br><span class=\"line\">    ctx.set(<span class=\"string\">\"Access-Control-Allow-Methods\"</span>, <span class=\"string\">\"OPTIONS, GET, PUT, POST, DELETE\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 字段是必需的。它也是一个逗号分隔的字符串，表明服务器支持的所有头信息字段.</span></span><br><span class=\"line\">    ctx.set(<span class=\"string\">\"Access-Control-Allow-Headers\"</span>, <span class=\"string\">\"x-requested-with, accept, origin, content-type\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 服务器收到请求以后，检查了Origin、Access-Control-Request-Method和Access-Control-Request-Headers字段以后，确认允许跨源请求，就可以做出回应。</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Content-Type表示具体请求中的媒体类型信息</span></span><br><span class=\"line\">    ctx.set(<span class=\"string\">\"Content-Type\"</span>, <span class=\"string\">\"application/json;charset=utf-8\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 该字段可选。它的值是一个布尔值，表示是否允许发送Cookie。默认情况下，Cookie不包括在CORS请求之中。</span></span><br><span class=\"line\">    <span class=\"comment\">// 当设置成允许请求携带cookie时，需要保证\"Access-Control-Allow-Origin\"是服务器有的域名，而不能是\"*\";</span></span><br><span class=\"line\">    ctx.set(<span class=\"string\">\"Access-Control-Allow-Credentials\"</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 该字段可选，用来指定本次预检请求的有效期，单位为秒。</span></span><br><span class=\"line\">    <span class=\"comment\">// 当请求方法是PUT或DELETE等特殊方法或者Content-Type字段的类型是application/json时，服务器会提前发送一次请求进行验证</span></span><br><span class=\"line\">    <span class=\"comment\">// 下面的的设置只本次验证的有效时间，即在该时间段内服务端可以不用进行验证</span></span><br><span class=\"line\">    ctx.set(<span class=\"string\">\"Access-Control-Max-Age\"</span>, <span class=\"number\">300</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    CORS请求时，XMLHttpRequest对象的getResponseHeader()方法只能拿到6个基本字段：</span></span><br><span class=\"line\"><span class=\"comment\">        Cache-Control、</span></span><br><span class=\"line\"><span class=\"comment\">        Content-Language、</span></span><br><span class=\"line\"><span class=\"comment\">        Content-Type、</span></span><br><span class=\"line\"><span class=\"comment\">        Expires、</span></span><br><span class=\"line\"><span class=\"comment\">        Last-Modified、</span></span><br><span class=\"line\"><span class=\"comment\">        Pragma。</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"comment\">// 需要获取其他字段时，使用Access-Control-Expose-Headers，</span></span><br><span class=\"line\">    <span class=\"comment\">// getResponseHeader('myData')可以返回我们所需的值</span></span><br><span class=\"line\">    ctx.set(<span class=\"string\">\"Access-Control-Expose-Headers\"</span>, <span class=\"string\">\"myData\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">await</span> next();</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>注释掉上文中的 app.use(cors()) 部分，替换成原生node实现，调用方法同上，效果是一致的,根据实际需要，设置不同的参数配置。</p>\n"},{"title":"koa 使用mysql教程","date":"2019-07-29T16:00:00.000Z","_content":"\n#### 基础方法\n安装： `npm install --save mysql`\n\n```javascript\nconst Koa =require('koa')\nconst app =new Koa()\nconst mysql =require('mysql')\n\n//创建连接池\nconst pool=mysql.createPool({\n    host:'127.0.0.1',\n    user:'root',\n    password:'数据库密码',\n    database:'数据库'\n})\n\npool.getConnection((err,connection)=>{\n    connection.query('select * from user',(err,res)=>{\n        if(err){\n            console.log(err.message)\n            return \n        }\n        console.log(res)\n    })\n    connection.release()\n})\n\napp.listen(5000)\nconsole.log('server begin ...')\n```\n执行结果：\n![20190730175850.png](https://raw.githubusercontent.com/itlilei/pic/master/20190730175850.png)\n\n#### createPoolCluster 连接池集群\n","source":"_posts/FE /node/koa使用mysql教程.md","raw":"---\ntitle: koa 使用mysql教程\ndate: 2019-07-30\ntags:\n  - js\n  - node\n  - koa\ncategories: 前端\n---\n\n#### 基础方法\n安装： `npm install --save mysql`\n\n```javascript\nconst Koa =require('koa')\nconst app =new Koa()\nconst mysql =require('mysql')\n\n//创建连接池\nconst pool=mysql.createPool({\n    host:'127.0.0.1',\n    user:'root',\n    password:'数据库密码',\n    database:'数据库'\n})\n\npool.getConnection((err,connection)=>{\n    connection.query('select * from user',(err,res)=>{\n        if(err){\n            console.log(err.message)\n            return \n        }\n        console.log(res)\n    })\n    connection.release()\n})\n\napp.listen(5000)\nconsole.log('server begin ...')\n```\n执行结果：\n![20190730175850.png](https://raw.githubusercontent.com/itlilei/pic/master/20190730175850.png)\n\n#### createPoolCluster 连接池集群\n","slug":"FE /node/koa使用mysql教程","published":1,"updated":"2019-07-30T09:59:06.251Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjypvaf8u0001wzv9zeuu3umo","content":"<h4 id=\"基础方法\"><a href=\"#基础方法\" class=\"headerlink\" title=\"基础方法\"></a>基础方法</h4><p>安装： <code>npm install --save mysql</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Koa =<span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> app =<span class=\"keyword\">new</span> Koa()</span><br><span class=\"line\"><span class=\"keyword\">const</span> mysql =<span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建连接池</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> pool=mysql.createPool(&#123;</span><br><span class=\"line\">    host:<span class=\"string\">'127.0.0.1'</span>,</span><br><span class=\"line\">    user:<span class=\"string\">'root'</span>,</span><br><span class=\"line\">    password:<span class=\"string\">'数据库密码'</span>,</span><br><span class=\"line\">    database:<span class=\"string\">'数据库'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">pool.getConnection(<span class=\"function\">(<span class=\"params\">err,connection</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    connection.query(<span class=\"string\">'select * from user'</span>,(err,res)=&gt;&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(err.message)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    connection.release()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">5000</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'server begin ...'</span>)</span><br></pre></td></tr></table></figure>\n<p>执行结果：<br><img src=\"https://raw.githubusercontent.com/itlilei/pic/master/20190730175850.png\" alt=\"20190730175850.png\"></p>\n<h4 id=\"createPoolCluster-连接池集群\"><a href=\"#createPoolCluster-连接池集群\" class=\"headerlink\" title=\"createPoolCluster 连接池集群\"></a>createPoolCluster 连接池集群</h4>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"基础方法\"><a href=\"#基础方法\" class=\"headerlink\" title=\"基础方法\"></a>基础方法</h4><p>安装： <code>npm install --save mysql</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Koa =<span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> app =<span class=\"keyword\">new</span> Koa()</span><br><span class=\"line\"><span class=\"keyword\">const</span> mysql =<span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建连接池</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> pool=mysql.createPool(&#123;</span><br><span class=\"line\">    host:<span class=\"string\">'127.0.0.1'</span>,</span><br><span class=\"line\">    user:<span class=\"string\">'root'</span>,</span><br><span class=\"line\">    password:<span class=\"string\">'数据库密码'</span>,</span><br><span class=\"line\">    database:<span class=\"string\">'数据库'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">pool.getConnection(<span class=\"function\">(<span class=\"params\">err,connection</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    connection.query(<span class=\"string\">'select * from user'</span>,(err,res)=&gt;&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(err.message)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    connection.release()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">5000</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'server begin ...'</span>)</span><br></pre></td></tr></table></figure>\n<p>执行结果：<br><img src=\"https://raw.githubusercontent.com/itlilei/pic/master/20190730175850.png\" alt=\"20190730175850.png\"></p>\n<h4 id=\"createPoolCluster-连接池集群\"><a href=\"#createPoolCluster-连接池集群\" class=\"headerlink\" title=\"createPoolCluster 连接池集群\"></a>createPoolCluster 连接池集群</h4>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjxyaefhc0009d9v9jpse2v4w","category_id":"cjxyaefh80006d9v9jz826kfb","_id":"cjxyaefhk000hd9v981px2i35"},{"post_id":"cjxyaefh20004d9v94i39clgv","category_id":"cjxyaefh80006d9v9jz826kfb","_id":"cjxyaefhl000ld9v9tksut3j9"},{"post_id":"cjxyaefh60005d9v9r9r151lm","category_id":"cjxyaefh80006d9v9jz826kfb","_id":"cjxyaefhn000qd9v9ek14e5kq"},{"post_id":"cjxyaefhi000ed9v9tldhouju","category_id":"cjxyaefhm000od9v9i0hl4bna","_id":"cjxyaefho000wd9v93eov8e21"},{"post_id":"cjxyaefhk000gd9v9y1vz4ev8","category_id":"cjxyaefhm000od9v9i0hl4bna","_id":"cjxyaefho000yd9v963f4ojtu"},{"post_id":"cjxyaefj80013d9v9ez687j3f","category_id":"cjxyaefhm000od9v9i0hl4bna","_id":"cjxyaefjb0015d9v9a9ei154m"},{"post_id":"cjxydaph80017d9v9zgw32ym2","category_id":"cjxyaefh80006d9v9jz826kfb","_id":"cjxydapha0019d9v97xyawbdp"},{"post_id":"cjxyietnv001ad9v9hgorc81p","category_id":"cjxyaefh80006d9v9jz826kfb","_id":"cjxyietnx001dd9v9qo7sskh6"},{"post_id":"cjy42nmko001fd9v96mjm44qg","category_id":"cjxyaefh80006d9v9jz826kfb","_id":"cjy42ola9001hd9v9mdjj5lqf"},{"post_id":"cjxyif6h6001ed9v98jk1ruxr","category_id":"cjxyaefh80006d9v9jz826kfb","_id":"cjy42rdf7001nd9v9rbssvn1n"},{"post_id":"cjy6x7krk001pd9v9s6haec08","category_id":"cjxyaefh80006d9v9jz826kfb","_id":"cjy6x86w6001rd9v9zei6v9rv"},{"post_id":"cjyh6enx50000r9v9ayuhbn8e","category_id":"cjxyaefhm000od9v9i0hl4bna","_id":"cjyh6euy60002r9v9vt70am6y"},{"post_id":"cjygus7fo001ud9v92ssgjopm","category_id":"cjxyaefh80006d9v9jz826kfb","_id":"cjyh6g4ds0005r9v9i72s1vq2"},{"post_id":"cjyic7el30006r9v9lm6aevxr","category_id":"cjxyaefh80006d9v9jz826kfb","_id":"cjyic7mro0007r9v9uba2rfzf"},{"post_id":"cjypvaf8o0000wzv9fzz2ltjo","category_id":"cjxyaefh80006d9v9jz826kfb","_id":"cjypvaf8y0004wzv9rbbgraok"},{"post_id":"cjypvaf8u0001wzv9zeuu3umo","category_id":"cjxyaefh80006d9v9jz826kfb","_id":"cjypvaf8z0006wzv9iu0tqccj"}],"PostTag":[{"post_id":"cjxyaefhc0009d9v9jpse2v4w","tag_id":"cjxyaefha0007d9v9tduig9il","_id":"cjxyaefhi000dd9v9gieczzam"},{"post_id":"cjxyaefh20004d9v94i39clgv","tag_id":"cjxyaefha0007d9v9tduig9il","_id":"cjxyaefhj000fd9v97w9vjfir"},{"post_id":"cjxyaefh60005d9v9r9r151lm","tag_id":"cjxyaefha0007d9v9tduig9il","_id":"cjxyaefhm000md9v9rt9jbmga"},{"post_id":"cjxyaefhi000ed9v9tldhouju","tag_id":"cjxyaefhn000td9v9al66lc3d","_id":"cjxyaefhp0010d9v9isr8mzuu"},{"post_id":"cjxyaefhi000ed9v9tldhouju","tag_id":"cjxyaefho000xd9v97608qo1k","_id":"cjxyaefhp0011d9v93arq5ofk"},{"post_id":"cjxyaefhk000gd9v9y1vz4ev8","tag_id":"cjxyaefho000xd9v97608qo1k","_id":"cjxyaefhp0012d9v9ilb1pyj0"},{"post_id":"cjxyaefj80013d9v9ez687j3f","tag_id":"cjxyaefja0014d9v9leqreadn","_id":"cjxyaefjd0016d9v9186qq4rq"},{"post_id":"cjxydaph80017d9v9zgw32ym2","tag_id":"cjxyaefha0007d9v9tduig9il","_id":"cjxydapha0018d9v9ei0h30jk"},{"post_id":"cjxyietnv001ad9v9hgorc81p","tag_id":"cjxyaefha0007d9v9tduig9il","_id":"cjxyietnw001bd9v9vxwsn0ko"},{"post_id":"cjxyietnv001ad9v9hgorc81p","tag_id":"cjxyaefhm000pd9v9j1zw4ciz","_id":"cjxyietnx001cd9v94oj40hnn"},{"post_id":"cjy42nmko001fd9v96mjm44qg","tag_id":"cjy42osri001kd9v9wnda5mhj","_id":"cjy42osri001ld9v9loetbjdh"},{"post_id":"cjxyif6h6001ed9v98jk1ruxr","tag_id":"cjxyaefha0007d9v9tduig9il","_id":"cjy42rdf7001md9v99n6et13d"},{"post_id":"cjyh6enx50000r9v9ayuhbn8e","tag_id":"cjyh6f6yd0003r9v933vftath","_id":"cjyh6f6yd0004r9v9p6nlwhu0"},{"post_id":"cjyic7el30006r9v9lm6aevxr","tag_id":"cjxyaefha0007d9v9tduig9il","_id":"cjyic7q7a0009r9v9yj13dv3l"},{"post_id":"cjyic7el30006r9v9lm6aevxr","tag_id":"cjy6x8dk3001sd9v9kfenlgc6","_id":"cjyic7q7d000ar9v90wevk84n"},{"post_id":"cjyic7el30006r9v9lm6aevxr","tag_id":"cjyic7q760008r9v91e4rwwvs","_id":"cjyic7q7e000br9v92eo7ls0x"},{"post_id":"cjypvaf8o0000wzv9fzz2ltjo","tag_id":"cjxyaefha0007d9v9tduig9il","_id":"cjypvaf8w0002wzv9wo88fmc8"},{"post_id":"cjypvaf8o0000wzv9fzz2ltjo","tag_id":"cjy6x8dk3001sd9v9kfenlgc6","_id":"cjypvaf8y0003wzv94zksk7uu"},{"post_id":"cjypvaf8o0000wzv9fzz2ltjo","tag_id":"cjyic7q760008r9v91e4rwwvs","_id":"cjypvaf8y0005wzv99lsryir8"},{"post_id":"cjypvaf8u0001wzv9zeuu3umo","tag_id":"cjxyaefha0007d9v9tduig9il","_id":"cjypvaf8z0007wzv9szep72fm"},{"post_id":"cjypvaf8u0001wzv9zeuu3umo","tag_id":"cjy6x8dk3001sd9v9kfenlgc6","_id":"cjypvaf900008wzv9kpirmm0q"},{"post_id":"cjypvaf8u0001wzv9zeuu3umo","tag_id":"cjyic7q760008r9v91e4rwwvs","_id":"cjypvaf900009wzv9h2qikky1"}],"Tag":[{"name":"js","_id":"cjxyaefha0007d9v9tduig9il"},{"name":"react","_id":"cjxyaefhm000pd9v9j1zw4ciz"},{"name":"hexo","_id":"cjxyaefhn000td9v9al66lc3d"},{"name":"git","_id":"cjxyaefho000xd9v97608qo1k"},{"name":"VS Code","_id":"cjxyaefja0014d9v9leqreadn"},{"name":"CSS","_id":"cjy42or5r001id9v9uttw2ym7"},{"name":"css","_id":"cjy42osri001kd9v9wnda5mhj"},{"name":"node","_id":"cjy6x8dk3001sd9v9kfenlgc6"},{"name":"mac","_id":"cjyh6f6yd0003r9v933vftath"},{"name":"koa","_id":"cjyic7q760008r9v91e4rwwvs"}]}}